# 自我代碼審查規範

## 🎯 核心原則

**每次完成大的代碼修改後，必須進行全面的自我代碼審查**

## 📋 審查檢查清單

### 1. 功能完整性檢查

#### ✅ 任務完成度
- [ ] 所有計劃中的任務是否都已完成？
- [ ] 是否有遺漏的功能點？
- [ ] 新功能是否與現有系統兼容？

#### ✅ 方法調用一致性
- [ ] 所有方法調用是否使用統一的新邏輯？
- [ ] 是否還有舊方法的調用需要更新？
- [ ] 方法簽名和參數是否一致？

### 2. 代碼質量檢查

#### ✅ 重複代碼清理
- [ ] 是否還有重複的方法或邏輯？
- [ ] 舊的、不再使用的方法是否已刪除？
- [ ] 是否有功能重複的代碼塊？

#### ✅ 複雜度控制
- [ ] 方法是否過於複雜？可以簡化嗎？
- [ ] 是否有過度工程化的部分？
- [ ] 邏輯是否清晰易懂？

#### ✅ 過度工程化檢查
- [ ] 是否為了展示技術能力而增加不必要的複雜度？
- [ ] 是否有過多的抽象層？能否直接實現？
- [ ] 是否創建了過多的小方法？能否合併？
- [ ] 是否有不必要的設計模式或架構？
- [ ] 是否能用 5 行代碼解決的問題用了 50 行？

#### ✅ 命名一致性
- [ ] 變量、方法、類名是否遵循統一規範？
- [ ] 是否與現有代碼的命名風格一致？
- [ ] 是否有拼寫錯誤或命名錯誤？

### 3. 錯誤處理檢查

#### ✅ 類型安全
- [ ] 是否有 `undefined` 或 `null` 檢查？
- [ ] 是否使用了可選鏈 `?.` 避免錯誤？
- [ ] `parseInt()` 等函數是否有 fallback 值？

#### ✅ DOM 操作安全
- [ ] DOM 查詢是否可能返回 `null`？
- [ ] 元素是否存在才進行操作？
- [ ] 事件綁定是否正確？

#### ✅ 異步操作
- [ ] Promise 是否有適當的錯誤處理？
- [ ] `await` 使用是否正確？
- [ ] 是否有未處理的異常？

### 4. 性能優化檢查

#### ✅ DOM 操作效率
- [ ] 是否避免了重複的 DOM 查詢？
- [ ] 是否使用了高效的選擇器？
- [ ] 是否有不必要的 DOM 操作？

#### ✅ 算法複雜度
- [ ] 排序和搜索算法是否高效？
- [ ] 是否有 O(n²) 的嵌套循環？
- [ ] 是否可以優化為更簡單的邏輯？

### 5. 兼容性檢查

#### ✅ 向後兼容
- [ ] 新代碼是否破壞了現有功能？
- [ ] API 接口是否保持一致？
- [ ] 數據結構是否兼容？

#### ✅ 瀏覽器兼容
- [ ] 使用的 JavaScript 特性是否廣泛支持？
- [ ] CSS 屬性是否有 fallback？
- [ ] 事件處理是否兼容不同瀏覽器？

### 6. 代碼清理檢查

#### ✅ 調試代碼清理
- [ ] 是否還有不必要的 `console.log`？
- [ ] 是否有臨時註釋需要清理？
- [ ] 是否有測試代碼需要移除？

#### ✅ 註釋和文檔
- [ ] 複雜邏輯是否有適當的註釋？
- [ ] 方法是否有清晰的 JSDoc？
- [ ] 是否有過時的註釋需要更新？

## 🔍 具體檢查項目

### 方法實現檢查

#### 新方法添加
- [ ] 方法是否放在正確的位置？
- [ ] 方法名稱是否清晰描述功能？
- [ ] 方法是否有適當的錯誤處理？
- [ ] 方法是否遵循單一職責原則？

#### 現有方法修改
- [ ] 修改是否影響其他功能？
- [ ] 是否保持了原有的 API 接口？
- [ ] 是否添加了必要的參數驗證？

### 數據流檢查

#### 狀態管理
- [ ] 全局狀態是否正確更新？
- [ ] 本地狀態是否與全局狀態同步？
- [ ] 是否有狀態不一致的問題？

#### 事件處理
- [ ] 事件監聽器是否正確綁定？
- [ ] 事件處理函數是否正確解綁？
- [ ] 是否有內存洩漏風險？

### 集成檢查

#### 模塊依賴
- [ ] 導入的模塊是否正確？
- [ ] 模塊間的依賴關係是否清晰？
- [ ] 是否有循環依賴？

#### 配置一致性
- [ ] 配置參數是否與其他模塊一致？
- [ ] 常量定義是否統一？
- [ ] 是否有硬編碼的值需要提取？

## 🚨 常見問題檢查

### 邏輯錯誤
- [ ] 條件判斷是否正確？
- [ ] 循環邏輯是否有邊界問題？
- [ ] 遞歸調用是否有終止條件？

### 性能問題
- [ ] 是否有不必要的重複計算？
- [ ] 是否有內存洩漏？
- [ ] 是否有阻塞主線程的操作？

### 安全問題
- [ ] 用戶輸入是否經過驗證？
- [ ] 是否有 XSS 風險？
- [ ] 敏感信息是否正確處理？

### 過度工程化問題
- [ ] 是否創建了過多的輔助方法？
- [ ] 是否有不必要的類或模塊？
- [ ] 是否為了"完美"而過度設計？
- [ ] 是否能用簡單 if-else 的地方用了複雜的 switch？
- [ ] 是否能用直接賦值的地方用了複雜的計算？

## 📝 審查報告模板

完成審查後，按以下格式總結：

```
## 代碼審查結果

### ✅ 已修復的問題
1. 問題描述 - 修復方案
2. 問題描述 - 修復方案

### ⚠️ 需要注意的問題
1. 問題描述 - 建議改進
2. 問題描述 - 建議改進

### 🎯 功能驗證
- [ ] 功能 A 正常工作
- [ ] 功能 B 正常工作
- [ ] 集成測試通過

### 📊 代碼質量評分
- 功能完整性: X/10
- 代碼簡潔性: X/10
- 代碼質量: X/10
- 性能優化: X/10
- 兼容性: X/10

### 🏆 總體評估
代碼已達到生產標準，可以部署。
```

## 🎯 審查標準

### 必須通過的標準
- [ ] 所有功能正常工作
- [ ] 沒有明顯的邏輯錯誤
- [ ] 沒有性能問題
- [ ] 與現有系統兼容

### 建議達到的標準
- [ ] 代碼簡潔易讀
- [ ] 避免過度工程化
- [ ] 錯誤處理完善
- [ ] 性能優化到位
- [ ] 文檔註釋清晰

## 🔄 審查流程

1. **功能檢查** - 確保所有功能正常工作
2. **簡潔性檢查** - 移除過度工程化，追求簡潔優雅
3. **代碼清理** - 移除冗餘和重複代碼
4. **錯誤修復** - 修復發現的問題
5. **性能優化** - 優化性能瓶頸
6. **兼容性驗證** - 確保與現有系統兼容
7. **最終驗證** - 全面測試所有功能

---

**記住：好的代碼不是寫出來的，是審查出來的！**