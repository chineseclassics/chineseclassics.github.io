# Git 工作流程規範

> **引用方式**: `@git-workflow`  
> **適用範圍**: 所有太虛幻境項目和子項目  
> **維護者**: 太虛幻境開發團隊

## 🎯 核心原則

### 1. 提交前檢查
- 確保所有修改都經過測試
- 檢查是否有未使用的導入或代碼
- 確認修改符合項目規範

### 2. 提交信息規範
- 使用繁體中文描述修改內容
- 第一行簡潔描述主要變更（50字以內）
- 空行後詳細描述修改原因和影響
- 列出修改的文件清單

### 3. 分支管理
- 主分支：`main`
- 功能分支：`feature/功能名稱`
- 修復分支：`fix/問題描述`
- 緊急修復：`hotfix/問題描述`

## 📝 提交信息模板

### 功能開發
```bash
git commit -m "新增功能：功能名稱

- 具體實現的功能描述
- 解決的問題或需求
- 技術實現要點

修改文件：
- 路徑/文件1.js: 具體修改內容
- 路徑/文件2.js: 具體修改內容"
```

### 問題修復
```bash
git commit -m "修復問題：問題描述

- 問題的根本原因分析
- 採用的解決方案
- 修復後的預期效果

修復文件：
- 路徑/文件1.js: 修復邏輯
- 路徑/文件2.js: 相關調整"
```

### 重構優化
```bash
git commit -m "重構優化：模組名稱

- 重構的目標和原因
- 主要改進點
- 性能或可維護性提升

重構文件：
- 路徑/文件1.js: 重構內容
- 路徑/文件2.js: 相關調整"
```

## 🔄 標準提交流程

### 1. 檢查狀態
```bash
# 查看當前狀態
git status

# 查看修改內容
git diff

# 查看暫存區內容
git diff --cached
```

### 2. 添加文件
```bash
# 添加所有修改
git add .

# 或添加特定文件
git add 路徑/文件.js
```

### 3. 提交變更
```bash
# 使用詳細的提交信息
git commit -m "提交信息標題

詳細描述：
- 修改內容1
- 修改內容2

修改文件：
- 文件1: 修改說明
- 文件2: 修改說明"
```

### 4. 推送變更
```bash
# 推送到遠程倉庫
git push origin main

# 或推送到功能分支
git push origin feature/功能名稱
```

## 🚨 特殊情況處理

### GitHub Desktop 認證問題
當遇到 HTTPS 認證問題時：
1. 使用 GitHub Desktop 進行手動認證
2. 在 GitHub Desktop 中點擊 "Push origin"
3. 按照提示完成認證流程

### 提交衝突解決
```bash
# 拉取最新變更
git pull origin main

# 解決衝突後
git add .
git commit -m "解決合併衝突"
git push origin main
```

### 緊急修復流程
```bash
# 創建緊急修復分支
git checkout -b hotfix/問題描述

# 進行修復
# ... 修改代碼 ...

# 提交修復
git add .
git commit -m "緊急修復：問題描述

- 問題原因
- 修復方案
- 影響範圍

修復文件：
- 文件1: 修復內容"

# 推送並合併
git push origin hotfix/問題描述
# 在 GitHub 上創建 PR 並快速合併
```

## 📋 提交檢查清單

### 提交前檢查
- [ ] 代碼已測試且功能正常
- [ ] 沒有未使用的導入或變量
- [ ] 代碼符合項目規範
- [ ] 提交信息清晰完整
- [ ] 修改文件清單準確

### 推送前檢查
- [ ] 本地提交已創建
- [ ] 遠程倉庫狀態正常
- [ ] 沒有未推送的提交
- [ ] 分支狀態正確

## 🎯 最佳實踐

### 1. 頻繁提交
- 每完成一個小功能就提交
- 避免大量修改一次性提交
- 保持提交歷史清晰

### 2. 原子性提交
- 每次提交只解決一個問題
- 避免混合不相關的修改
- 確保提交可以獨立回滾

### 3. 描述性信息
- 提交信息要能清楚說明修改內容
- 包含修改的原因和影響
- 便於後續維護和回顧

### 4. 分支管理
- 功能開發使用獨立分支
- 及時合併和清理分支
- 保持主分支穩定

## 🔧 常用命令

### 狀態查看
```bash
git status                    # 查看工作區狀態
git log --oneline -5         # 查看最近5次提交
git diff                     # 查看工作區修改
git diff --cached            # 查看暫存區修改
```

### 文件操作
```bash
git add .                    # 添加所有修改
git add 文件路徑             # 添加特定文件
git restore 文件路徑         # 撤銷工作區修改
git restore --staged 文件路徑 # 撤銷暫存區修改
```

### 提交操作
```bash
git commit -m "信息"         # 簡單提交
git commit -am "信息"        # 添加並提交已跟蹤文件
git commit --amend           # 修改最後一次提交
```

### 推送操作
```bash
git push origin main         # 推送到主分支
git push origin 分支名       # 推送到指定分支
git push -u origin 分支名    # 推送並設置上游分支
```

## 📚 相關規則

- `@development-standards` - 開發標準
- `@documentation-standards` - 文檔創建規範
- `@problem-solving-principles` - 問題解決原則

---

**最後更新**: 2025-01-20  
**版本**: 1.0.0