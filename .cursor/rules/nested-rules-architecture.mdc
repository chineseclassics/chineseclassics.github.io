---
description: 太虛幻境巢狀規則架構 - 兩層規則系統最佳實踐
alwaysApply: false
---

# 太虛幻境巢狀規則架構

> 本規則定義太虛幻境兩層項目架構下的規則組織最佳實踐

## 🏗️ 兩層規則系統

根據 [Cursor 官方文檔](https://cursor.com/zh-Hant/docs/context/rules)，巢狀規則會在引用該目錄中的檔案時自動套用。

## 🧭 經驗教訓（重要）

- 巢狀規則的 globs 必須以「子項目根目錄」為相對路徑，不要包含 `story-vocab/` 等前綴
- 建議使用 YAML 清單格式撰寫 globs（每行一條），避免 inline 陣列引發 UI 紅字
- globs 大小寫敏感，必要時使用字元類別，如 `*[Dd]eploy*.md`
- Manual 規則不需要 globs，透過 `@ruleName` 引用即可
- Auto 規則的 globs 必須能匹配到實際檔案，否則 UI 會警告

### 架構設計

```
chineseclassics.github.io/
├── .cursor/rules/              # 平台級規則（所有子項目共享）
│   ├── language.mdc            # 語言規範
│   ├── file-organization.mdc   # 文件組織
│   ├── coding-standards.mdc    # 代碼規範
│   └── ...
│
└── [子項目]/
    ├── .cursor/rules/          # 子項目專屬規則
    │   └── [專屬規則].mdc
    └── ...
```

## 📋 平台級規則（根目錄）

### 應該包含

這些規則適用於**所有子項目**：

1. **語言規範** (`language.mdc`)
   - 始終使用繁體中文
   - Always 規則

2. **文件組織規範** (`file-organization.mdc`)
   - 兩層架構原則
   - 文件放置決策
   - Always 規則

3. **通用代碼規範** (`coding-standards.mdc`)
   - 清晰命名、單一職責
   - 禁止行為
   - Always 規則

4. **Git 工作流程** (`git-workflow.mdc`)
   - 提交規範、分支管理
   - Manual 規則

5. **Meta 規則** (`how-to-create-rules.mdc`)
   - 如何創建規則
   - Manual 規則

### 不應該包含

- ❌ 子項目專屬的業務邏輯
- ❌ 特定應用的設計模式
- ❌ 子項目專屬的技術棧細節

## 📚 子項目規則（巢狀規則）

### Story-Vocab 範例

創建 `story-vocab/.cursor/rules/` 並包含：

#### 1. `vocab-design.mdc`
```mdc
---
description: Story-Vocab 設計原則和架構
globs: ["story-vocab/**"]
alwaysApply: false
---

# Story-Vocab 設計原則

## 核心理念
- AI 驅動的詞彙推薦
- 個性化學習路徑
- 遊戲化體驗

## 數據庫設計原則
- 使用 Supabase
- RLS 策略保護用戶數據
- Edge Functions 處理 AI 邏輯

...
```

#### 2. `supabase-deployment.mdc`
```mdc
---
description: Story-Vocab 的 Supabase 部署流程
globs: ["supabase/**", "docs/*deploy*.md"]
alwaysApply: false
---

# Story-Vocab Supabase 部署

## 部署流程
在 story-vocab 目錄內直接部署：

```bash
cd story-vocab
supabase link --project-ref bjykaipbeokbbykvseyr
supabase functions deploy vocab-recommender
```

...
```

#### 3. `ai-prompts.mdc`
```mdc
---
description: Story-Vocab AI 提示詞規範
globs: ["**/prompts.ts", "**/ai*.ts"]
alwaysApply: false
---

# AI 提示詞規範

## DeepSeek API 使用
- 使用繁體中文提示
- 控制 token 使用
- 錯誤處理和降級

...
```

### WanWuXiaoYao（莊子遊戲）範例

創建 `wanwuxiaoyao/.cursor/rules/` 並包含：

#### `game-mechanics.mdc`
```mdc
---
description: 莊子遊戲機制規範
globs: ["wanwuxiaoyao/**/*.js", "wanwuxiaoyao/**/*.html"]
alwaysApply: false
---

# 莊子遊戲機制規範

## 場景編號管理
- 場景編號必須連續
- 修改場景時更新所有 nextScene 指向
- 使用統一的場景類型

## 物化系統
- 初次物化體驗 vs 日常物化
- 視覺效果管理
- 狀態追蹤

...
```

## 🎯 規則類型選擇指南

### 平台級規則

| 規則 | 類型 | 原因 |
|------|------|------|
| 語言規範 | Always | 所有代碼都需要遵守 |
| 文件組織 | Always | 架構原則必須一致 |
| 代碼規範 | Always | 通用編碼標準 |
| Git 工作流程 | Manual | 按需引用 |

### 子項目規則

| 規則 | 類型 | 原因 |
|------|------|------|
| 設計原則 | Auto | 處理該項目時自動啟用 |
| 技術棧細節 | Auto | 匹配特定文件路徑 |
| 部署流程 | Manual | 需要時明確引用 |

## ✅ 創建子項目規則的步驟

### 1. 創建目錄
```bash
cd [子項目目錄]
mkdir -p .cursor/rules
```

### 2. 確定需要的規則

問自己：
- 這個子項目有什麼**獨特**的設計原則？
- 有哪些技術棧是這個項目**專屬**的？
- 有哪些工作流程需要**明確記錄**？

### 3. 創建規則文件

使用 `.mdc` 格式，參考 `@how-to-create-rules`

### 4. 設置 globs 路徑

在子項目規則中，globs 應相對於該子項目根目錄書寫：
```yaml
# ✅ 正確（相對於 story-vocab/）
globs: ["supabase/**", "docs/**", "**/*.ts"]

# ❌ 錯誤（包含子項目前綴會導致不匹配）
globs: ["story-vocab/supabase/**"]
```

### 5. 測試規則

在子項目中工作，確認：
- 平台級規則仍然啟用
- 子項目規則自動啟用
- 沒有衝突

## 🔄 規則繼承示例

### 場景 1：在 story-vocab 工作

當你打開 `story-vocab/js/app.js`：

**啟用的規則**：
1. ✅ `language.mdc` (平台級 Always)
2. ✅ `file-organization.mdc` (平台級 Always)
3. ✅ `coding-standards.mdc` (平台級 Always)
4. ✅ `story-vocab/.cursor/rules/vocab-design.mdc` (子項目 Auto)

### 場景 2：在 wanwuxiaoyao 工作

當你打開 `wanwuxiaoyao.html`：

**啟用的規則**：
1. ✅ `language.mdc` (平台級 Always)
2. ✅ `file-organization.mdc` (平台級 Always)
3. ✅ `coding-standards.mdc` (平台級 Always)
4. ✅ `wanwuxiaoyao/.cursor/rules/game-mechanics.mdc` (子項目 Auto)
5. ❌ story-vocab 的規則**不會**啟用

## 📐 最佳實踐

### 1. 保持平台級規則通用
- 只包含**所有子項目**都需要的規則
- 避免具體技術實現細節
- 專注於架構原則和標準

### 2. 子項目規則應該具體
- 包含該項目的設計決策
- 記錄技術棧特定最佳實踐
- 提供具體代碼範例

### 3. 避免規則衝突
- 不要在子項目規則中推翻平台級規則
- 子項目規則應該是**補充**，不是**替代**
- 使用一致的命名和結構

### 4. 文檔化規則組織
- 在每個 `.cursor/rules/` 添加 README.md
- 說明該層級包含哪些規則
- 記錄規則之間的關係

### 5. 定期審查和更新
- 平台級規則變更時，通知所有子項目
- 子項目規則過時時及時清理
- 保持規則與實際代碼同步

## 🚫 反模式（避免）

### ❌ 不要重複平台級規則
```mdc
# ❌ 錯誤：在 story-vocab/.cursor/rules/ 重複語言規範
---
description: 使用繁體中文
alwaysApply: true
---
# 這已經在平台級定義了！
```

### ❌ 不要在平台級包含子項目細節
```mdc
# ❌ 錯誤：在根目錄規則包含 story-vocab 細節
---
description: 代碼規範
alwaysApply: true
---
## Story-Vocab AI 提示詞規範
# 這應該在 story-vocab/.cursor/rules/ 中！
```

### ❌ 不要使用衝突的 globs
```yaml
# ❌ 錯誤：子項目規則使用過於寬泛的 globs
globs: ["**/*.ts"]  # 會匹配所有項目！

# ✅ 正確：限定在子項目範圍
globs: ["story-vocab/**/*.ts"]
```

## 📊 當前太虛幻境規則架構

### 根目錄規則（已有）
- ✅ `language.mdc` - 語言規範
- ✅ `file-organization.mdc` - 文件組織
- ✅ `coding-standards.mdc` - 代碼規範
- ✅ `git-workflow.mdc` - Git 工作流程
- ✅ `how-to-create-rules.mdc` - 創建規則指南
- ✅ `nested-rules-architecture.mdc` - 本規則

### 待創建的子項目規則
- ⏳ `story-vocab/.cursor/rules/` - 詞游記專屬
- ⏳ `wanwuxiaoyao/.cursor/rules/` - 莊子遊戲專屬（可選）
- ⏳ 其他子項目根據需要創建

## 🔗 相關文檔

- [Cursor Rules 官方文檔](https://cursor.com/zh-Hant/docs/context/rules)
- [太虛幻境架構文檔](../../TAIXU_ARCHITECTURE.md)
- [如何創建規則](./how-to-create-rules.mdc) - 使用 `@how-to-create-rules`

---

**使用方式**：當需要為新子項目創建規則時，使用 `@nested-rules-architecture` 引用本規則。
