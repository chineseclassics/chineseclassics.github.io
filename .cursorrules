# 太虛幻境項目開發規則

> **注意**：本文件已被新的專案規則系統取代。詳見：
> - `.cursor/rules/` - 專案規則（MDC 格式）
> - `AGENTS.md` - 簡化的 Agent 指令

---

## 🌏 語言規範
- 始終使用繁體中文回應
- 代碼註釋使用繁體中文
- 文檔使用繁體中文

## 📂 文件組織規範

### 核心原則
1. **兩層結構**：太虛幻境根目錄（平台級）+ 子項目目錄（應用級）
2. **完全自包含**：每個子項目是獨立單元，所有資源都在內部
3. **文檔集中**：所有詳細文檔必須在子項目的 `docs/` 文件夾內
4. **根目錄簡潔**：子項目根目錄只放 README.md、index.html 和工具腳本

### 太虛幻境根目錄（只放平台級內容）
```
/chineseclassics.github.io/
├── index.html                    # 平台入口
├── TAIXU_ARCHITECTURE.md         # 平台架構文檔
├── README.md                     # 平台說明
├── .cursorrules                  # 本文件
├── supabase/config.toml          # Supabase CLI 配置
├── package.json                  # 平台級配置
├── 各個獨立應用.html              # 未重構的舊應用
└── story-vocab/                  # 新結構子項目
```

**禁止在根目錄放置**：
- ❌ 子項目專屬的文檔
- ❌ 子項目專屬的工具腳本
- ❌ 子項目專屬的資源文件

### 子項目標準結構（以 story-vocab 為典範）
```
story-vocab/
├── README.md                     # 項目說明（快速開始）
├── index.html                    # 應用入口
├── *.sh                         # 工具腳本（可執行）
├── js/                          # JavaScript 代碼
├── css/                         # 樣式文件
├── data/                        # 數據文件
├── assets/                      # 資源文件（字體、圖片、音頻）
├── admin/                       # 管理工具
├── supabase/                    # Edge Functions & Migrations
└── docs/                        # 所有詳細文檔
    ├── README.md                # 文檔索引
    ├── DESIGN.md                # 設計文檔
    ├── DEPLOYMENT*.md           # 部署相關
    └── ...其他所有 .md 文檔
```

**詳細規範**：參見 `story-vocab/docs/FILE_ORGANIZATION_RULES.md`

### 文件放置決策
創建新文件時問自己：
1. 這是哪個項目的文件？
2. 這是什麼類型？（代碼/文檔/腳本/數據）
3. 如果是文檔，是項目說明（README.md）還是詳細文檔（docs/）？

**黃金規則**：
- 📄 除了 README.md，所有 .md 文檔都放在 `docs/` 內
- 🔧 工具腳本放在項目根目錄（方便執行）
- 🚫 絕不在太虛幻境根目錄放子項目的文件

## 🏗️ 架構原則（參考 TAIXU_ARCHITECTURE.md）

### 應用分類：四境體系
- 📝 **翰墨齋**：現代中文體驗
- 🏛️ **千古堂**：古代經典體驗
- 🎨 **錦繡坊**：中華文化體驗
- ☁️ **雲外樓**：實驗與跨界體驗

### 應用開發原則
1. **獨立自包含**：每個應用可以獨立運行和分發
2. **簡單直接**：避免過度複雜的架構
3. **漸進式改進**：新應用採用最佳實踐，老應用按需重構
4. **教學優先**：技術服務於教學目標

### 資源管理
- ✅ 應用專屬資源放在應用的 `assets/` 內
- ✅ 通用資源從 `/files/` 複製到應用內（不依賴全局）
- ✅ 外部依賴使用 CDN

### Supabase 架構管理
- ✅ 每個子項目擁有獨立的 `supabase/` 目錄和 `config.toml`
- ✅ 在子項目目錄內直接部署，使用相對路徑
- ✅ 根目錄 `/supabase/` 僅作為平台級預留位置
- ❌ 絕不將子項目的 Supabase 資源複製到根目錄
- ❌ 絕不在根目錄部署子項目的 Edge Functions

**部署示例**：
```bash
# ✅ 正確做法：在子項目目錄內
cd story-vocab
supabase link --project-ref [project-id]
supabase functions deploy [function-name]

# ❌ 錯誤做法：複製到根目錄
cp -r story-vocab/supabase/functions supabase/  # 絕不這樣做！
```

## 💻 代碼規範

### 通用規則
- 使用清晰的變量和函數命名（繁體中文註釋）
- 保持函數簡潔，單一職責
- 添加必要的註釋說明複雜邏輯
- 避免過度工程化

### 禁止行為
- ❌ 不要在太虛幻境根目錄創建子項目的文件
- ❌ 不要在子項目根目錄堆積文檔
- ❌ 不要隨意修改 Git 配置
- ❌ 不要運行破壞性的 Git 命令（force push、hard reset）
- ❌ 不要未經確認就提交代碼

## 📝 文檔規範

### 創建文檔時
1. **立即放對位置**：不要先放錯地方再移動
2. **更新索引**：在 `docs/README.md` 中添加鏈接
3. **使用描述性文件名**：如 `DEPLOYMENT_GUIDE.md` 而非 `DEPLOY.md`
4. **添加頭部信息**：包括創建日期、目的、維護者

### 文檔命名規範
- 使用大寫字母和下劃線：`DEPLOYMENT_GUIDE.md`
- 使用完整單詞，避免縮寫：`IMPLEMENTATION_SUMMARY.md`
- 分類前綴：`DESIGN_`、`DEPLOYMENT_`、`IMPLEMENTATION_` 等

## 🔄 Git 工作流程

### 提交規範
- 使用清晰的提交消息（繁體中文）
- 描述"做了什麼"而不是"怎麼做"
- 大改動時提供詳細說明

### 分支管理
- `main`：穩定版本
- `dev`：開發版本（如需要）
- 功能分支：`feature/功能名稱`

## 🤖 AI 協作規範

### 與 AI 對話時
- 提供充分的上下文
- 明確指出要修改哪個項目
- 確認 AI 理解了文件組織規範
- 驗證生成的代碼符合規範

### AI 應該做的
- 查看項目架構文檔
- 遵循文件組織規範
- 提供替代方案和建議
- 指出潛在問題

### AI 不應該做的
- 不要自作主張添加功能
- 不要隨意改變架構
- 不要忽略用戶的明確指示
- 不要總是迎合（應該提出質疑和建議）

## 📚 關鍵文檔參考

- **平台架構**：`/TAIXU_ARCHITECTURE.md`
- **文件組織規範**：`/story-vocab/docs/FILE_ORGANIZATION_RULES.md`
- **Story-Vocab 設計**：`/story-vocab/docs/DESIGN.md`
- **Supabase CLI 使用**：`/story-vocab/docs/SUPABASE_CLI_GUIDE.md`

---

**版本**: 1.0  
**創建日期**: 2025-10-11  
**維護者**: 書院中文經典

