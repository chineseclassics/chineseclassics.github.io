<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <!-- 移除了CSP定義 -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>古典填詞工具 - 基於欽定詞譜</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lxgw-wenkai-webfont@1.1.0/style.css" />
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@300;400;500;600;700;900&display=swap" rel="stylesheet">
    <!-- 添加更多字體資源，提升海報效果 -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Ma+Shan+Zheng&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC&display=swap">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        /* 韻部選擇按鈕 */
        .rhyme-select-button {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            background: linear-gradient(45deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: 20px;
            font-size: 0.9em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(155, 125, 86, 0.2);
            margin: 0 auto;
        }

        .rhyme-select-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(155, 125, 86, 0.4);
        }

        .rhyme-select-button.selected {
            background: linear-gradient(45deg, var(--primary-dark) 0%, var(--secondary-dark) 100%);
        }

        .rhyme-select-button .music-icon {
            margin-right: 5px;
            font-size: 1.1em;
        }
        
        /* 韻部選擇彈窗樣式 */
        .rhyme-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none; /* 默认隐藏模态窗口 */
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        /* 韻部卡片相關樣式 */
        .rhyme-info-panel {
            margin-bottom: 15px;
            padding: 10px;
            background: #f5f6fa;
            border-radius: 8px;
            font-size: 0.9em;
            color: #555;
        }
        
        .dark-mode .rhyme-info-panel {
            background: #2a2e3c;
            color: #ccc;
        }
        
        .rhyme-scheme-info {
            margin-bottom: 15px;
            color: #333;
            font-size: 0.9em;
            background: #f5f6fa;
            border-radius: 8px;
            padding: 12px;
            border: 1px solid #e0e0e0;
        }
        
        .dark-mode .rhyme-scheme-info {
            background: #2a2e3c;
            border-color: #3a3f52;
            color: #e0e0e0;
        }
        
        .rhyme-scheme-info h4 {
            margin: 0 0 10px 0;
            font-size: 1em;
            color: #9b7d56;
        }
        
        .dark-mode .rhyme-scheme-info h4 {
            color: #b7987a;
        }
        
        .rhyme-scheme-types {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .rhyme-scheme-type {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .rhyme-scheme-badge {
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            min-width: 45px;
            text-align: center;
        }
        
        .ping-badge {
            background-color: var(--ping-bg);
            border: 1px solid var(--ping-border);
            color: var(--ping-text);
        }
        
        .ze-badge {
            background-color: var(--ze-bg);
            border: 1px solid var(--ze-border);
            color: var(--ze-text);
        }
        
        .ru-badge {
            background-color: #eee8f8;
            border: 1px solid #9c7ed0;
            color: #6a4baa;
        }
        
        .huan-badge {
            background-color: #e8f2ff;
            border: 1px solid #5587d5;
            color: #2c5694;
        }
        
        .ye-badge {
            background-color: #fff1e6;
            border: 1px solid #e09356;
            color: #b15c10;
        }
        
        .dark-mode .ru-badge {
            background-color: #382d4a;
            border-color: #7a6ba5;
            color: #b7a1e3;
        }
        
        .dark-mode .huan-badge {
            background-color: #293447;
            border-color: #4571b5;
            color: #89b5f5;
        }
        
        .dark-mode .ye-badge {
            background-color: #3d2e1d;
            border-color: #a16a3d;
            color: #e09c65;
        }
        
        .rhyme-scheme-desc {
            font-size: 0.85em;
            color: #666;
        }
        
        .dark-mode .rhyme-scheme-desc {
            color: #aaa;
        }
        
        .rhyme-cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
            max-height: 450px; /* 增加最大高度，以便显示三行卡片 */
            overflow-y: auto;
            padding-right: 5px;
        }
        
        .rhyme-card {
            background: white;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            flex-direction: column;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .dark-mode .rhyme-card {
            background: #3a3f52;
            border-color: #4a4f66;
        }
        
        .rhyme-card:hover {
            border-color: #9b7d56;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(155, 125, 86, 0.2);
        }
        
        .rhyme-card.selected {
            border-color: #9b7d56;
            background: rgba(155, 125, 86, 0.1);
        }
        
        .dark-mode .rhyme-card.selected {
            border-color: #b7987a;
            background: rgba(155, 125, 86, 0.2);
        }
        
        .rhyme-card-name {
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
            font-size: 0.95em;
        }
        
        .dark-mode .rhyme-card-name {
            color: #e0e0e0;
        }
        
        .rhyme-card-desc {
            font-size: 0.8em;
            color: #666;
            margin-bottom: 8px;
        }
        
        .dark-mode .rhyme-card-desc {
            color: #aaa;
        }
        
        .rhyme-card-samples {
            font-size: 0.85em;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }
        
        .rhyme-card-ping {
            color: #2c4da9;
        }
        
        .rhyme-card-ze {
            color: #b43b36;
            margin-left: 5px;
        }
        
        .dark-mode .rhyme-card-ping {
            color: #a0c0ff;
        }
        
        .dark-mode .rhyme-card-ze {
            color: #ffb0aa;
        }
        
        /* 開關切換器樣式 */
        .rhyme-toggle-switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 20px;
            margin-right: 8px;
        }
        
        .rhyme-toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .rhyme-toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .rhyme-toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .rhyme-toggle-slider {
            background-color: #9b7d56;
        }
        
        input:checked + .rhyme-toggle-slider:before {
            transform: translateX(20px);
        }
        
        .rhyme-modal-content {
            background: white;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: visible; /* 改为visible，不显示滚动条 */
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
        }
        
        .dark-mode .rhyme-modal-content {
            background: #2c3143;
            color: #e0e0e0;
        }
        
        .rhyme-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
        }
        
        .dark-mode .rhyme-modal-header {
            border-bottom: 1px solid #3a3f52;
        }
        
        .rhyme-modal-title {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
            margin: 0;
        }
        
        .dark-mode .rhyme-modal-title {
            color: #e0e0e0;
        }
        
        .rhyme-modal-close {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
            color: #666;
        }
        
        .dark-mode .rhyme-modal-close {
            color: #aaa;
        }
        
        .rhyme-modal-body {
            padding: 20px;
        }
        
        .rhyme-modal-footer {
            display: flex;
            justify-content: flex-end;
            padding: 15px 20px;
            border-top: 1px solid #eee;
            gap: 10px;
        }
        
        .dark-mode .rhyme-modal-footer {
            border-top: 1px solid #3a3f52;
        }
        
        .rhyme-apply-btn, .rhyme-cancel-btn {
            padding: 8px 16px;
            border-radius: 20px;
            border: none;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s ease;
        }
        
        .rhyme-apply-btn {
            background: linear-gradient(45deg, #9b7d56 0%, #5c3c10 100%);
            color: white;
        }
        
        .rhyme-cancel-btn {
            background: #f0f0f0;
            color: #333;
        }
        
        .dark-mode .rhyme-cancel-btn {
            background: #3a3f52;
            color: #e0e0e0;
        }
        
        .rhyme-apply-btn:hover, .rhyme-cancel-btn:hover {
            transform: translateY(-2px);
        }
        
        .rhyme-group-dropdown {
            width: 100%;
            padding: 10px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            background: white;
            font-size: 16px;
            color: #333;
            transition: all 0.3s ease;
        }
        
        .dark-mode .rhyme-group-dropdown {
            background: #3a3f52;
            border-color: #4a4f66;
            color: #e0e0e0;
        }
        
        .rhyme-group-dropdown:focus {
            border-color: #9b7d56;
            outline: none;
            box-shadow: 0 0 0 3px rgba(155, 125, 86, 0.25);
        }
        
        .rhyme-group-info {
            margin-top: 15px;
            padding: 15px;
            border-radius: 10px;
            background: #f8f9fa;
            border: 1px solid #e0e0e0;
            display: none;
        }
        
        .rhyme-group-info.active {
            display: block;
            animation: fadeIn 0.3s ease-out;
        }
        
        .dark-mode .rhyme-group-info {
            background: #2a2e3c;
            border-color: #3a3f52;
        }
        
        .rhyme-group-info-title {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 8px;
            color: #5D5CDE;
        }
        
        .dark-mode .rhyme-group-info-title {
            color: #7469DC;
        }
        
        .rhyme-group-description {
            margin-bottom: 12px;
            color: #555;
            font-size: 0.9em;
        }
        
        .dark-mode .rhyme-group-description {
            color: #ccc;
        }
        
        .rhyme-sample-container {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .rhyme-ping-sample, .rhyme-ze-sample {
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.9em;
        }
        
        .rhyme-ping-sample {
            background: #e1eeff;
            color: #2c4da9;
        }
        
        .rhyme-ze-sample {
            background: #f9e9e8;
            color: #b43b36;
        }
        
        .dark-mode .rhyme-ping-sample {
            background: #2c3f65;
            color: #a0c0ff;
        }
        
        .dark-mode .rhyme-ze-sample {
            background: #5a302e;
            color: #ffb0aa;
        }
        
        .rhyme-status {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 15px;
            padding: 10px;
            border-radius: 8px;
            background: #f0f7ff;
            color: #2c4da9;
        }
        
        .dark-mode .rhyme-status {
            background: #2c3f65;
            color: #a0c0ff;
        }
        
        .rhyme-status-icon {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4caf50;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        
        .rhyme-status-icon::before {
            content: '✓';
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* 固定位置选择器样式 */
        .fixed-position {
            position: fixed !important;
            left: 50% !important;
            bottom: 20px !important;
            transform: translateX(-50%);
            z-index: 1000 !important;
            min-width: 280px;
            max-width: 90vw;
            background: white;
            box-shadow: 0 -5px 20px rgba(0, 0, 0, 0.3) !important;
        }
        
        /* 高亮正在编辑的字符 */
        .actively-editing {
            transform: scale(1.2);
            box-shadow: 0 0 15px rgba(255, 152, 0, 0.8) !important;
            z-index: 50;
            position: relative;
            animation: highlight-pulse 1s infinite;
        }
        
        @keyframes highlight-pulse {
            0%, 100% { box-shadow: 0 0 15px rgba(255, 152, 0, 0.8); }
            50% { box-shadow: 0 0 25px rgba(255, 152, 0, 1); }
        }
        
        /* 遮罩层样式 */
        .rhyme-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.3);
            z-index: 999;
        }

        body {
            font-family: "Noto Serif SC", "SimSun", serif;
            background: var(--light-bg);
            min-height: 100vh;
            padding: 10px;
            transition: background 0.5s ease;
        }
        
        .dark-mode body {
            background: var(--dark-bg);
            color: #e6e6e6;
        }

        .container {
            max-width: 1400px;
            height: calc(100vh - 20px);
            margin: 0 auto;
            background: var(--card-light-bg);
            border-radius: 18px;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            transition: all 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);
            animation: container-fade-in 0.8s ease-out;
        }
        
        .dark-mode .container {
            background: var(--card-dark-bg);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
            color: #e6e6e6;
        }
        
        @keyframes container-fade-in {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* 深色模式支持 */
        @media (prefers-color-scheme: dark) {
            body {
                background: linear-gradient(135deg, #1a1a2e 0%, #162447 100%);
                color: #e6e6e6;
            }
            
            .container {
                background: rgba(30, 30, 42, 0.97);
                box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
            }
            
            .sidebar {
                background: rgba(32, 32, 45, 0.9);
                border-right: 1px solid rgba(255, 255, 255, 0.05);
                box-shadow: 3px 0 15px -5px rgba(0, 0, 0, 0.2);
            }
            
            .sidebar-header {
                background: linear-gradient(45deg, #4A4AE0 0%, #5245C2 100%);
                box-shadow: 0 4px 18px rgba(0, 0, 0, 0.3);
            }
            
            .poem-item {
                background: rgba(40, 40, 55, 0.8);
                border-color: rgba(60, 60, 75, 0.8);
                color: #e0e0e0;
            }
            
            .poem-item:hover {
                border-color: #6A67E5;
                box-shadow: 0 6px 15px rgba(93, 92, 222, 0.4);
            }
            
            .poem-item.active {
                background: linear-gradient(45deg, #4A4AE0 0%, #5245C2 100%);
                border-color: #4A4AE0;
            }
            
            .poem-header h2 {
                color: #e0e0e0;
            }
            
            .author-info, #authorDisplay {
                color: #9b7d56;
            }
            
            .display-area {
                background: rgba(36, 36, 48, 0.95);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            }
            
            .rhyme-group-selector, .floating-rhyme-selector {
                background: rgba(36, 36, 48, 0.95);
                border-color: #5D5CDE;
            }
            
            .rhyme-group-info {
                background: rgba(45, 45, 60, 0.8);
                border-color: rgba(80, 80, 100, 0.3);
            }
            
            .rhyme-group-dropdown {
                background: rgba(36, 36, 48, 0.95);
                border-color: rgba(93, 92, 222, 0.5);
                color: #e0e0e0;
            }
            
            .floating-rhyme-char {
                background: rgba(45, 45, 60, 0.8);
                border-color: rgba(80, 80, 100, 0.3);
                color: #e0e0e0;
            }
            
            .floating-rhyme-char:hover {
                background: #5D5CDE;
                color: white;
            }
            
            .cipai-toggle-btn {
                background: rgba(36, 36, 48, 0.95);
                border-color: rgba(80, 80, 100, 0.3);
            }
            
            .version-btn {
                background: rgba(45, 45, 60, 0.8);
                border-color: rgba(80, 80, 100, 0.3);
                color: #e0e0e0;
            }
            
            .version-btn.active {
                background: #5D5CDE;
                color: white;
            }
            
            .btn {
                background: linear-gradient(45deg, #4A4AE0 0%, #5245C2 100%);
            }
            
            .punctuation {
                color: #a0a0a0;
            }
        }

        .main-content {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        .sidebar {
            width: 320px;
            background: #f8f9fa;
            border-right: 1px solid rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            padding: 0;
            position: relative;
            overflow: hidden;
            height: 100%;
            transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
            box-shadow: 3px 0 15px -5px rgba(0, 0, 0, 0.07);
            border-radius: 18px 0 0 18px; /* 只在左侧（外侧）有圆角 */
        }
        
        .dark-mode .sidebar {
            background: rgba(32, 32, 45, 0.9);
            border-right: 1px solid rgba(255, 255, 255, 0.05);
            box-shadow: 3px 0 15px -5px rgba(0, 0, 0, 0.2);
        }
        
        .poem-list-container {
            overflow-y: auto;
            height: calc(100% - 150px); /* 减去标题和搜索框的高度 */
            padding-top: 15px;
        }

        .content-area {
            flex: 1;
            padding: 0;  /* 移除padding */
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        
        .content-area {
            flex: 1;
            padding: 0;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            position: relative; /* 添加相對定位 */
        }
        
        .display-area {
            background: white;
            border-radius: 10px;
            padding: 25px;
            position: absolute; /* 改用絕對定位 */
            top: 0; /* 直接貼齊頂部 */
            left: 20px;
            right: 20px;
            bottom: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }

        .sidebar-header {
            display: flex;
            flex-direction: column;
            padding: 28px 24px;
            background: linear-gradient(45deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            box-shadow: 0 4px 18px rgba(0, 0, 0, 0.15);
            margin-bottom: 0;
            border-right: 1px solid rgba(0, 0, 0, 0.05);
            position: sticky;
            top: 0;
            z-index: 10;
            transition: all 0.3s ease;
            animation: sidebar-header-fade-in 0.6s ease-out;
        }
        
        .dark-mode .sidebar-header {
            background: linear-gradient(45deg, var(--primary-dark) 0%, var(--secondary-dark) 100%);
            box-shadow: 0 4px 18px rgba(0, 0, 0, 0.3);
        }
        
        @keyframes sidebar-header-fade-in {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .app-title {
            font-size: 2.2em;
            margin: 0 0 26px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            letter-spacing: 1.2px;
            text-align: center;
            font-weight: 700;
            font-family: "Noto Serif SC", serif;
        }

        .search-box {
            width: 100%;
            padding: 12px 18px;
            border: 2px solid rgba(255, 255, 255, 0.4);
            border-radius: 12px;
            margin-bottom: 12px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.15);
            color: white;
            transition: all 0.3s ease;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);
            font-family: "Noto Serif SC", serif;
            font-weight: 400;
        }

        .search-box:focus {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.6);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.18);
            outline: none;
        }

        .search-box::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .cipai-section {
            margin-bottom: 25px;
            padding: 0 20px;
        }

        .cipai-title {
            background: linear-gradient(45deg, var(--primary-color) 0%, var(--secondary-dark) 100%);
            color: white;
            padding: 12px 18px;
            border-radius: 10px;
            margin-bottom: 18px;
            font-weight: 600;
            font-size: 1.1em;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
            font-family: "Noto Serif SC", serif;
        }

        .char-count {
            background: rgba(255, 255, 255, 0.3);
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 0.8em;
            margin-left: 8px;
        }

        .poem-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            padding: 0 2px;
        }

        .poem-item {
            padding: 14px 16px;
            background: white;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
            text-align: left;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            margin: 0 1px 10px 1px;
            transform: translateY(0);
            position: relative;
            overflow: hidden;
        }
        
        .poem-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, rgba(93, 92, 222, 0), rgba(93, 92, 222, 0.05));
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 0;
        }

        .poem-item:hover {
            border-color: #5D5CDE;
            box-shadow: 0 6px 15px rgba(93, 92, 222, 0.25);
            transform: translateY(-3px);
        }
        
        .poem-item:hover::before {
            opacity: 1;
        }

        .poem-item.active {
            background: linear-gradient(45deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border-color: var(--primary-color);
            box-shadow: 0 6px 20px rgba(155, 125, 86, 0.4);
        }
        
        .dark-mode .poem-item {
            background: rgba(40, 40, 55, 0.8);
            border-color: rgba(60, 60, 75, 0.8);
            color: #e0e0e0;
        }
        
        .dark-mode .poem-item:hover {
            border-color: #6A67E5;
            box-shadow: 0 6px 15px rgba(93, 92, 222, 0.4);
        }
        
        .dark-mode .poem-item.active {
            background: linear-gradient(45deg, #4A4AE0 0%, #5245C2 100%);
            border-color: #4A4AE0;
        }

        .poem-title {
            font-weight: 700;
            font-size: 1em;
            margin-bottom: 5px;
            font-family: "Noto Serif SC", serif;
        }

        .poem-preview {
            font-size: 0.85em;
            color: #666;
            line-height: 1.4;
            font-family: "Noto Serif SC", serif;
            font-weight: 300;
        }

        .poem-item.active .poem-preview {
            color: rgba(255, 255, 255, 0.8);
        }

        .display-area {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }

        .poem-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e0e0e0;
        }

        .poem-header h2 {
            font-size: 2.2em;
            color: #333;
            margin-bottom: 10px;
            font-weight: 700;
            font-family: "Noto Serif SC", serif;
        }

        .poem-header .author-info {
            font-size: 1.2em;
            color: #9b7d56;
            font-weight: bold;
        }

        /* 作者名編輯相關樣式 - 簡化版 */
        .author-info-simple {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 5px;
        }
        
        #authorDisplay {
            font-size: 1.2em;
            color: #9b7d56;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 5px 10px;
        }
        
        #authorDisplay:hover {
            text-decoration: underline;
        }

        .author-input {
            border: 2px solid #667eea;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 1.2em;
            text-align: center;
            min-width: 150px;
            color: #667eea;
            font-weight: bold;
        }
        
        /* 標題編輯相關樣式 */
        .title-input {
            border: 2px solid #667eea;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 1em; /* 減小字體大小與原標題匹配 */
            text-align: center;
            min-width: 150px; /* 調整最小寬度 */
            width: auto; /* 讓寬度自適應內容 */
            max-width: 80%; /* 避免過寬 */
            color: #333;
            font-weight: 700;
            font-family: "Noto Serif SC", serif;
            margin: 0; /* 移除外邊距 */
            height: auto; /* 高度自適應 */
            line-height: normal; /* 恢復標準行高 */
        }
        
        #titleDisplay {
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: inherit; /* 繼承父元素字體大小 */
        }

        #titleDisplay:hover {
            text-decoration: underline;
        }
        
        .dark-mode .title-input {
            color: #e0e0e0;
            background-color: rgba(60, 60, 75, 0.3);
            border-color: #7469DC;
        }

        /* 格律圖例 */
        .pattern-legend {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 15px;
            font-size: 0.85em;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .legend-symbol {
            width: 25px;
            height: 25px;
            border-radius: 3px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.8em;
        }

        .ping-legend { background-color: var(--ping-bg); border: 2px solid var(--ping-border); color: var(--ping-text); }
        .ze-legend { background-color: var(--ze-bg); border: 2px solid var(--ze-border); color: var(--ze-text); }
        .flexible-legend { background-color: var(--flexible-bg); border: 2px solid var(--flexible-border); color: var(--flexible-text); }
        .rhyme-ping-legend { background-color: var(--ping-bg); border: 2px solid var(--ping-border); box-shadow: 0 0 0 2px var(--ping-border); color: var(--ping-text); }
        .rhyme-ze-legend { background-color: var(--ze-bg); border: 2px solid var(--ze-border); box-shadow: 0 0 0 2px var(--ze-border); color: var(--ze-text); }

        .version-switcher {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .version-btn {
            padding: 8px 16px;
            background: #f0f0f0;
            border: 1px solid #ddd;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s ease;
        }

        .version-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .poem-display {
            font-size: 1.4em;
            line-height: 2.5;
            text-align: center;
            max-width: 800px;
            margin: 0 auto;
            font-family: "LXGW WenKai", serif;
        }

        .poem-line {
            margin-bottom: 20px;
        }

        .char-span {
            display: inline-flex;
            justify-content: center;
            align-items: center;
            min-width: 35px;
            height: 45px;
            line-height: 45px;
            margin: 0 4px; /* 增加字符间距从2px到4px */
            cursor: pointer;
            transition: all 0.25s cubic-bezier(0.215, 0.61, 0.355, 1);
            border-radius: 5px;
            text-align: center;
            position: relative;
            border: 2px solid transparent;
            -webkit-tap-highlight-color: transparent; /* 移除iOS上的点击高亮 */
            touch-action: manipulation; /* 优化触摸行为 */
        }

        .char-span:hover {
            transform: scale(1.1);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }

        .char-span.editing {
            background-color: #fff3e0;
            border: 2px solid #ff9800;
            animation: pulse 1.2s ease-in-out infinite;
            box-shadow: 0 0 15px rgba(255, 152, 0, 0.3);
        }

        .char-span.modified {
            font-weight: bold;
            box-shadow: 0 3px 10px rgba(93, 92, 222, 0.25);
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
        }

        /* 創建CSS變量用於主題配色 - 竹簡風格 */
        :root {
            /* 主要配色 - 竹簡風格 */
            --primary-color: #9b7d56;
            --primary-light: #b7987a;
            --primary-dark: #5c3c10;
            --primary-hover: #a68c6c;
            --primary-active: #876943;
            
            /* 次要配色 */
            --secondary-color: #7c6242;
            --secondary-light: #a68c6c;
            --secondary-dark: #5c3c10;
            
            /* 中性色 */
            --neutral-100: #f8f6f2;
            --neutral-200: #ece6db;
            --neutral-300: #dfd4c3;
            --neutral-400: #cdc0ab;
            --neutral-500: #b7a58a;
            --neutral-600: #9b7d56;
            --neutral-700: #7c6242;
            --neutral-800: #5c3c10;
            --neutral-900: #3d2a0e;
            
            /* 功能色 */
            --success-color: #6a8b50;
            --info-color: #6c8a70;
            --warning-color: #c2974e;
            --error-color: #b06b4f;
            
            /* 專用平仄韻配色 - 竹簡協調色系 */
            --ping-bg: #e6efdb;
            --ping-border: #7d9b56;
            --ping-text: #4c6a29;
            
            --ze-bg: #f2e6d5;
            --ze-border: #b87c4b;
            --ze-text: #8a5331;
            
            /* 可平可仄用極淺的米色調，最大化區分度 */
            --flexible-bg: #fffef9;
            --flexible-border: #f0e0a0;
            --flexible-text: #5c3c10;
            
            /* 明暗模式背景 - 改为更柔和的米黄色调 */
            --light-bg: linear-gradient(135deg, #f9f5e7 0%, #f0e9d2 100%);
            --dark-bg: linear-gradient(135deg, #342b1f 0%, #252011 100%);
            
            /* 卡片背景 - 修改深色模式配色 */
            --card-light-bg: rgba(240, 234, 223, 0.98);
            --card-dark-bg: rgba(46, 38, 26, 0.97);
        }
        
        /* 平仄和押韻樣式 */
        .ping-char {
            background-color: var(--ping-bg) !important;
            border: 2px solid var(--ping-border) !important;
            color: var(--ping-text) !important;
        }

        .ze-char {
            background-color: var(--ze-bg) !important;
            border: 2px solid var(--ze-border) !important;
            color: var(--ze-text) !important;
        }

        .flexible-char {
            background-color: var(--flexible-bg) !important;
            border: 2px solid var(--flexible-border) !important;
            color: var(--flexible-text) !important;
        }

        /* 韵脚基本样式 */
        .rhyme-ping {
            background-color: var(--ping-bg) !important;
            border: 2px solid var(--ping-border) !important;
            font-weight: bold;
            position: relative;
            z-index: 5; /* 确保动画不被其他元素遮挡 */
            color: #000000 !important; /* 統一為黑色 */
        }

        .rhyme-ze {
            background-color: var(--ze-bg) !important;
            border: 2px solid var(--ze-border) !important;
            font-weight: bold;
            position: relative;
            z-index: 5; /* 确保动画不被其他元素遮挡 */
            color: #000000 !important; /* 統一為黑色 */
        }
        
        /* 深色模式下的文字顏色調整 */
        .dark-mode .ping-char,
        .dark-mode .ze-char,
        .dark-mode .flexible-char,
        .dark-mode .rhyme-ping,
        .dark-mode .rhyme-ze {
            color: #ffffff !important; /* 深色模式下統一為白色 */
        }
        
        /* 平仄不匹配樣式 - 只添加虛線邊框和驚嘆號，完全保留原有平仄顏色和邊框顏色 */
        .tone-mismatch {
            position: relative;
            border-style: dashed !important;
            /* 不改變邊框顏色，保留原有平仄顏色的邊框 */
            /* 不改變背景色，保留原有平仄顏色 */
        }

        .tone-mismatch::after {
            content: '!';
            position: absolute;
            top: -8px;
            right: -5px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background-color: var(--warning-color);
            color: white;
            font-size: 12px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 5px rgba(255, 170, 64, 0.7);
            z-index: 10; /* 確保驚嘆號顯示在最上層 */
        }
        
        /* 平仄建議選擇器 */
        .tone-suggestion-box {
            margin-top: 10px;
            padding: 8px;
            background: var(--neutral-100);
            border: 1px solid var(--warning-color);
            border-radius: 5px;
            font-size: 0.9em;
        }

        .tone-suggestion-title {
            margin-bottom: 5px;
            font-weight: bold;
            color: var(--warning-color);
        }

        .tone-suggestion-chars {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .suggestion-char {
            padding: 3px 8px;
            background-color: white;
            border: 1px solid var(--neutral-300);
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .suggestion-char:hover {
            background-color: var(--primary-light);
            color: white;
            transform: scale(1.1);
        }

        .dark-mode .tone-suggestion-box {
            background: var(--neutral-800);
            border-color: var(--warning-color);
        }

        .dark-mode .suggestion-char {
            background-color: var(--neutral-700);
            border-color: var(--neutral-600);
            color: var(--neutral-200);
        }

        .dark-mode .suggestion-char:hover {
            background-color: var(--primary-dark);
            color: white;
        }

        /* 添加韵脚位置动画效果 */
        .char-span.rhyme-ping {
            animation: rhyme-pulse-ping-glow 1.5s infinite !important;
            box-shadow: 0 0 10px 3px rgba(155, 125, 86, 0.6) !important; /* 光暈效果 - 竹簡風格 */
            position: relative;
            z-index: 5; /* 確保光暈不被其他元素遮擋 */
        }

        .char-span.rhyme-ze {
            animation: rhyme-pulse-ze-glow 1.5s infinite !important;
            box-shadow: 0 0 10px 3px rgba(92, 60, 16, 0.6) !important; /* 光暈效果 - 竹簡風格 */
            position: relative;
            z-index: 5; /* 確保光暈不被其他元素遮擋 */
        }

        @keyframes rhyme-pulse-ping-glow {
            0%, 100% { 
                box-shadow: 0 0 10px 3px rgba(155, 125, 86, 0.6), 0 0 15px 5px rgba(155, 125, 86, 0.3); 
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 15px 5px rgba(155, 125, 86, 0.8), 0 0 25px 10px rgba(155, 125, 86, 0.4); 
                transform: scale(1.05);
            }
        }

        @keyframes rhyme-pulse-ze-glow {
            0%, 100% { 
                box-shadow: 0 0 10px 3px rgba(92, 60, 16, 0.6), 0 0 15px 5px rgba(92, 60, 16, 0.3); 
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 15px 5px rgba(92, 60, 16, 0.8), 0 0 25px 10px rgba(92, 60, 16, 0.4); 
                transform: scale(1.05);
            }
        }
        
        /* 直接在韵脚字上触发动画效果，简化动画选择器 */
        .rhyme-ping {
            animation: rhyme-pulse-ping-glow 1.5s infinite;
        }
        
        .rhyme-ze {
            animation: rhyme-pulse-ze-glow 1.5s infinite;
        }
        
        .defined-rhyme {
            position: relative;
        }
        
        .defined-rhyme::after {
            content: '';
            position: absolute;
            top: -8px;
            right: -5px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #9b7d56;
            box-shadow: 0 0 5px rgba(155, 125, 86, 0.7);
        }

        /* 输入法风格的韵字弹窗样式 */
        .floating-rhyme-selector {
            position: absolute;
            background: white;
            border: 2px solid #9b7d56;
            border-radius: 12px;
            padding: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            z-index: 1001;
            min-width: 280px;
            max-width: 90vw;
            animation: fadeIn 0.2s ease-out;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            background-color: rgba(255, 255, 255, 0.95);
        }
        
        .dark-mode .floating-rhyme-selector {
            background: rgba(40, 40, 60, 0.95);
            color: #e0e0e0;
        }
        
        /* 独立的箭头元素 */
        .selector-arrow {
            position: absolute;
            width: 0;
            height: 0;
            z-index: 100;
            transform: translateX(-50%);
        }
        
        .selector-arrow.arrow-down {
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-top: 10px solid #667eea;
        }
        
        .selector-arrow.arrow-up {
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-bottom: 10px solid #667eea;
            border-top: none;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .floating-rhyme-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(4, 1fr);
            gap: 6px;
            margin-bottom: 10px;
        }

        .floating-rhyme-char {
            padding: 8px 0;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            text-align: center;
            font-size: 1em;
            transition: all 0.2s ease;
            user-select: none;
        }
        
        .dark-mode .floating-rhyme-char {
            background: #3a3f52;
            border-color: #4a4f66;
            color: #e0e0e0;
        }

        .floating-rhyme-char:hover {
            background: #9b7d56;
            color: white;
            border-color: #9b7d56;
            transform: scale(1.1);
        }
        
        .floating-rhyme-char:active {
            transform: scale(0.95);
        }
        
        .floating-rhyme-title {
            text-align: center;
            margin-bottom: 10px;
            color: #333;
            font-size: 0.9em;
            font-weight: bold;
        }
        
        .dark-mode .floating-rhyme-title {
            color: #e0e0e0;
        }
        
        /* 分页控制样式 */
        .rhyme-selector-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 5px;
        }
        
        .rhyme-page-indicator {
            display: flex;
            gap: 5px;
            justify-content: center;
            align-items: center;
            flex: 1;
        }
        
        .rhyme-page-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ddd;
            transition: all 0.2s ease;
        }
        
        .dark-mode .rhyme-page-dot {
            background: #4a4f66;
        }
        
        .rhyme-page-dot.active {
            background: #9b7d56;
            width: 12px;
            height: 12px;
        }
        
        .rhyme-nav-button {
            background: none;
            border: none;
            color: #9b7d56;
            font-size: 1.2em;
            cursor: pointer;
            padding: 5px 10px;
            transition: all 0.2s ease;
            border-radius: 5px;
        }
        
        .dark-mode .rhyme-nav-button {
            color: #b7987a;
        }
        
        .rhyme-nav-button:hover {
            background: rgba(155, 125, 86, 0.1);
        }
        
        .rhyme-nav-button:disabled {
            color: #ccc;
            cursor: not-allowed;
        }
        
        .rhyme-nav-button:active {
            transform: scale(0.95);
        }
        
        .rhyme-type-indicator {
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.7em;
            font-weight: bold;
            margin-left: 5px;
            vertical-align: middle;
        }
        
        .ping-indicator {
            background-color: var(--ping-bg, #e1eeff);
            border: 1px solid var(--ping-border, #4a6fdc);
            color: var(--ping-text, #2c4da9);
        }
        
        .ze-indicator {
            background-color: var(--ze-bg, #f9e9e8);
            border: 1px solid var(--ze-border, #d95550);
            color: var(--ze-text, #b43b36);
        }
        
        /* 旧的全屏韵字选择器样式（保留作为备选） */
        .rhyme-selector {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border: 2px solid #667eea;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            max-width: 400px;
        }

        .rhyme-selector h3 {
            text-align: center;
            margin-bottom: 15px;
            color: #333;
        }

        .rhyme-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .rhyme-char-btn {
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            background: white;
            cursor: pointer;
            text-align: center;
            font-size: 1.1em;
            transition: all 0.3s ease;
        }

        .rhyme-char-btn:hover {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .rhyme-close {
            width: 100%;
            padding: 8px;
            background: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        .rhyme-hint {
            font-size: 0.9em;
            color: #666;
            text-align: center;
            margin-top: 10px;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        @keyframes rhyme-pulse {
            0%, 100% { box-shadow: 0 0 0 rgba(102, 126, 234, 0); }
            50% { box-shadow: 0 0 8px rgba(102, 126, 234, 0.8); }
        }
        
        .rhyme-position {
            animation: rhyme-pulse 2s infinite;
            position: relative;
        }

        .char-input {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
            background: transparent;
            text-align: center;
            font-size: 1em;
            color: #333;
            outline: none;
            font-family: "LXGW WenKai", sans-serif;
        }

        .punctuation {
            margin: 0 5px;
            color: #666;
            cursor: default;
        }

        .controls {
            text-align: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }

        .btn {
            background: linear-gradient(45deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-size: 1em;
            cursor: pointer;
            margin: 0 5px;
            transition: all 0.3s ease;
            min-height: 44px; /* 确保触摸友好 */
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 0 1 auto;
            max-width: 180px;
            touch-action: manipulation;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(155, 125, 86, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }
        
        .dark-mode .btn {
            background: linear-gradient(45deg, var(--primary-dark) 0%, var(--secondary-dark) 100%);
        }

        .feedback {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
        }

        .feedback.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .feedback.info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .feedback.warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
            font-size: 0.9em;
            color: #666;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .prompt-message {
            text-align: center;
            color: #666;
            font-size: 1.2em;
            margin-top: 100px;
        }

        /* 移动端适配 */
        @media (max-width: 768px) {
            .main-content { flex-direction: column; }
            .sidebar { 
                width: 100%;
                /* 移除最大高度限制，让侧边栏可以自然扩展 */
                height: auto !important;
                min-height: 100% !important;
                overflow-y: auto;
            }
            .poem-display { 
                font-size: 1.1em; 
                line-height: 1.8;
            }
            .char-span { 
                min-width: 28px; 
                height: 38px;
                line-height: 38px;
                margin: 0 2px;
            }
            .display-area { padding: 12px; }
            .app-title { 
                font-size: 1.6em; 
                margin-bottom: 12px;
            }
            .poem-item { 
                padding: 12px; 
                margin-bottom: 8px; 
                touch-action: manipulation; 
            }
            .poem-item:active { transform: scale(0.98); }
            .btn { 
                padding: 10px 16px;
                font-size: 0.9em;
                margin: 0 4px;
                min-height: 44px; 
                touch-action: manipulation;
            }
            .rhyme-group-dropdown { 
                font-size: 14px;
                padding: 10px;
                height: 44px; 
            }
            .mobile-view-list .sidebar,
            .mobile-view-edit .content-area { animation: fadeIn 0.3s ease-out; }
            
            @keyframes fadeIn {
                from { opacity: 0.7; transform: translateY(5px); }
                to { opacity: 1; transform: translateY(0); }
            }
            
            /* 超小屏幕额外优化 */
            @media (max-width: 480px) {
                .poem-display { font-size: 1em; line-height: 1.7; }
                .char-span { 
                    min-width: 26px;
                    height: 34px;
                    line-height: 34px;
                    margin: 0 1px;
                }
                .sidebar-header { padding: 20px 16px; }
                .app-title { font-size: 1.4em; margin-bottom: 10px; }
                .search-box { padding: 10px 14px; }
                .poem-header h2 { font-size: 1.5em; }
                .controls { 
                    flex-wrap: wrap;
                    justify-content: center;
                    gap: 8px;
                }
                .btn { 
                    padding: 8px 14px;
                    flex: 1 0 auto;
                    max-width: 120px;
                }
                .pattern-legend { 
                    flex-wrap: wrap;
                    justify-content: center;
                    font-size: 0.8em;
                }
                .stats { 
                    flex-direction: column;
                    align-items: center;
                    gap: 8px;
                }
            }
        }

        .pattern-source {
            text-align: center;
            margin-top: 10px;
            font-size: 0.8em;
            color: #888;
        }
        
        /* 添加移動端滑動相關樣式 */
        .swipe-hint {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 14px;
            z-index: 2000;
            transition: transform 0.3s ease;
            pointer-events: none;
        }
        
        .swipe-hint.active {
            transform: translateX(-50%) translateY(0);
        }
        
        .swipe-progress {
            position: fixed;
            bottom: 0;
            left: 0;
            height: 4px;
            width: 0%;
            background: #9b7d56;
            z-index: 1000;
            transition: width 0.1s ease;
        }
        
        /* 桌面版按鈕隱藏 */
        @media (min-width: 769px) {
            .swipe-hint, 
            .swipe-progress {
                display: none !important;
            }
        }
        
        /* 側邊欄切換按鈕樣式 */
        .sidebar-toggle-container {
            position: absolute;
            z-index: 100;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            align-items: center;
            justify-content: center;
            display: none; /* 默認隱藏，只在桌面版顯示 */
        }
        
        .sidebar-toggle-btn {
            width: 28px;
            height: 60px;
            border-radius: 0 4px 4px 0;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
            border-left: none;
            transition: all 0.3s ease;
        }
        
        .sidebar-toggle-btn:hover {
            background: #f9f9f9;
        }
        
        .sidebar-toggle-btn .chevron-icon {
            transition: transform 0.3s ease;
        }
        
        /* 側邊欄隱藏時的按鈕樣式 */
        .sidebar-hidden .sidebar-toggle-btn .chevron-icon {
            transform: rotate(180deg);
        }
        
        /* 桌面版特有樣式 */
        @media (min-width: 769px) {
            .sidebar-hidden .sidebar {
                margin-left: -320px; /* 隱藏側邊欄 */
            }
            
            .sidebar-hidden .content-area {
                margin-left: 0;
            }
            
            .sidebar, .content-area {
                transition: all 0.3s ease;
            }
            
            .sidebar-toggle-container {
                display: flex; /* 桌面版顯示側邊欄切換按鈕 */
                left: 320px; /* 初始位置，與側邊欄寬度相同 */
            }
            
            .sidebar-hidden .sidebar-toggle-container {
                left: 0; /* 側邊欄隱藏時，按鈕靠左 */
            }
        }
        /* 移動端視圖樣式 */
        @media (max-width: 768px) {
            .column-toggle-container {
                display: block;
            }
            
            .main-content {
                flex-direction: column;
            }
            
            .sidebar, .content-area {
                width: 100%;
                transition: transform 0.3s ease, opacity 0.3s ease, height 0.3s ease;
            }
            
            /* 默認顯示詞牌列表，隱藏內容區 */
            .mobile-view-list .sidebar {
                display: block !important;
                opacity: 1 !important;
                height: calc(100% - 20px) !important;
                transform: translateY(0) !important;
            }
            
            .mobile-view-list .content-area {
                display: none !important;
                opacity: 0 !important;
                height: 0 !important;
                transform: translateY(20px) !important;
            }
            
            /* 顯示內容區，隱藏詞牌列表 */
            .mobile-view-edit .sidebar {
                display: none !important;
                opacity: 0 !important;
                height: 0 !important;
                transform: translateY(-20px) !important;
            }
            
            .mobile-view-edit .content-area {
                display: block !important;
                opacity: 1 !important;
                height: calc(100% - 20px) !important;
                transform: translateY(0) !important;
            }
            
            /* 適配小屏幕的字體和布局 */
            .poem-display {
                font-size: 1.2em;
                line-height: 1.8;
            }
            
            .char-span {
                min-width: 28px;
                height: 38px;
                line-height: 38px;
                margin: 0 2px;
            }
            
            .app-title {
                font-size: 1.8em;
                margin-bottom: 15px;
            }
            
            .poem-header h2 {
                font-size: 1.8em;
            }
            
            .display-area {
                padding: 15px;
            }
            
            .controls .btn {
                padding: 10px 20px;
                font-size: 0.9em;
                margin: 0 5px;
            }
        }
        
        /* 优化的韵部选择器样式 */
        .rhyme-group-selector {
            background: white;
            border: 2px solid #667eea;
            border-radius: 10px;
            padding: 10px;
            margin: 0 auto 15px auto;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }
        
        .rhyme-group-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .rhyme-group-title {
            font-size: 1em;
            color: #333;
            font-weight: bold;
            margin: 0;
            white-space: nowrap;
            margin-right: 10px;
        }
        
        .rhyme-group-dropdown {
            width: 100%;
            padding: 8px 10px;
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            background: white;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .rhyme-group-dropdown:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.25);
        }
        
        .rhyme-group-info {
            background: #f8f9fa;
            border-radius: 5px;
            padding: 8px;
            text-align: left;
            border: 1px solid #e0e0e0;
            margin-top: 5px;
            max-height: 0;
            overflow: hidden;
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .rhyme-group-info.active {
            max-height: 150px;
            opacity: 1;
            margin-bottom: 5px;
        }
        
        .rhyme-group-info-title {
            font-weight: bold;
            margin-bottom: 3px;
            color: #667eea;
            font-size: 0.9em;
        }
        
        .rhyme-group-description {
            font-size: 0.85em;
            color: #666;
            margin-bottom: 5px;
        }
        
        .rhyme-sample-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 5px;
        }
        
        .rhyme-ping-sample, .rhyme-ze-sample {
            font-size: 0.8em;
        }
        
        .rhyme-ping-sample::before {
            content: '平聲: ';
            font-weight: bold;
            color: #2196f3;
        }
        
        .rhyme-ze-sample::before {
            content: '仄聲: ';
            font-weight: bold;
            color: #f44336;
        }
        
        /* 選中韻部的狀態指示器 */
        .rhyme-status {
            display: flex;
            align-items: center;
            font-size: 0.85em;
            color: #4caf50;
            margin-top: 5px;
            padding-top: 5px;
            border-top: 1px dashed #e0e0e0;
        }
        
        .rhyme-status-icon {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #4caf50;
            margin-right: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .rhyme-status-icon::before {
            content: '✓';
            color: white;
            font-size: 10px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- 側邊欄切換控制器 - 桌面版專用 -->
        <div class="sidebar-toggle-container" id="sidebarToggleContainer">
            <div class="sidebar-toggle-btn" id="sidebarToggleBtn" aria-label="切換詞牌列表">
                <span class="sidebar-toggle-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="chevron-icon">
                        <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                    </svg>
                </span>
            </div>
        </div>
        
        <!-- 移除詞牌列表切換按鈕，使用滑動切換 -->
        
        <div class="main-content">
            <div class="sidebar" id="sidebarContainer">
                <div class="sidebar-header">
                    <h1 class="app-title">南風作詩</h1>
                </div>
                <div id="poemList" class="poem-list-container">
                    <!-- 詞作列表將由JavaScript生成 -->
                </div>
            </div>
            
            <div class="content-area" id="contentContainer">
                <div class="display-area">
                    <div class="prompt-message" id="promptMessage">
                        請從左側選擇一首詞作開始體驗
                    </div>
                    
                    <div id="poemDisplay" style="display: none;">
                        <div class="poem-header">
                            <h2 id="poemTitle"></h2>
                            <div class="author-info" id="authorInfo"></div>
                        </div>

                        <!-- 韵部选择器 - 优化版 -->
                        <div class="legend-with-rhyme-button">
                            <div class="pattern-legend" id="patternLegendInline">
                                <div class="legend-item">
                                    <div class="legend-symbol ping-legend"></div>
                                    <span>平聲</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-symbol ze-legend"></div>
                                    <span>仄聲</span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-symbol flexible-legend"></div>
                                    <span>可平可仄</span>
                                </div>
                            </div>
                            <button id="rhymeSelectButton" class="rhyme-select-button" onclick="unlockAndShowRhymeModal()">
                                <span class="music-icon">🎵</span>
                                選擇韻部
                            </button>
                        </div>
                        
                        <!-- 韻部選擇彈窗 - 修复结构 -->
                        <!-- 韻部選擇彈窗 - 卡片式界面 -->
                        <div id="rhymeModal" class="rhyme-modal">
                            <div class="rhyme-modal-content">
                                <div class="rhyme-modal-header">
                                    <div class="rhyme-modal-title" id="rhymeModalTitle"></div>
                                    <button id="rhymeModalClose" class="rhyme-modal-close">&times;</button>
                                </div>
                                
                                <div class="rhyme-modal-body">
                                    <!-- 完全移除了rhyme-info-panel -->
                                    <div class="rhyme-cards-container" id="rhymeCardsContainer">
                                        <!-- 韵部卡片将由JavaScript生成 -->
                                    </div>
                                    
                                    <div class="rhyme-settings">
                                        <label class="rhyme-toggle">
                                            <span class="rhyme-toggle-switch">
                                                <input type="checkbox" id="rhymeHintToggle" checked>
                                                <span class="rhyme-toggle-slider"></span>
                                            </span>
                                            顯示韻腳輔助提示字
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 保留原始的图例，但默认隐藏 -->
                        <div class="pattern-legend" id="patternLegend" style="display: none;">
                            <div class="legend-item">
                                <div class="legend-symbol ping-legend"></div>
                                <span>平聲</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-symbol ze-legend"></div>
                                <span>仄聲</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-symbol flexible-legend"></div>
                                <span>可平可仄</span>
                            </div>
                        </div>
                        
                        <div class="pattern-source" id="patternSource" style="display: none;">
                            
                        </div>
                        
                        <div class="version-switcher" id="versionSwitcher" style="display: none;">
                            <!-- 版本切換按鈕將由JavaScript生成 -->
                        </div>
                        
                        <div class="poem-display" id="poemContent">
                            <!-- 詞作內容將由JavaScript生成 -->
                        </div>
                        
                        <div class="controls">
                            <button class="btn" onclick="resetPoem()">還原原作</button>
                            <button class="btn" onclick="copyTextToClipboard()">複製文本</button>
                            <button class="btn" onclick="openPosterGenerator()">生成壁紙</button>
                        </div>
                        
                        <div class="stats" id="statsInfo">
                            <div class="stat-item">
                                <span>已修改：</span>
                                <span id="modifiedCount">0</span>
                                <span>字</span>
                            </div>
                            <div class="stat-item">
                                <span>總字數：</span>
                                <span id="totalCount">0</span>
                                <span>字</span>
                            </div>
                            <div class="stat-item">
                                <span>修改率：</span>
                                <span id="modifyRate">0%</span>
                            </div>
                        </div>
                        
                        <div id="feedback"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 添加海报生成模态窗口 - 简洁按钮风格 -->
<div id="posterModal" class="rhyme-modal">
    <div class="rhyme-modal-content" style="max-width: 380px; max-height: 90vh; overflow-y: auto; background: rgba(255, 255, 255, 0.95)">
        <div class="rhyme-modal-header">
            <div class="rhyme-modal-title">生成壁紙</div>
            <button id="posterModalClose" class="rhyme-modal-close">&times;</button>
        </div>
        
        <div class="rhyme-modal-body" style="padding: 15px; display: flex; flex-direction: column;">
            <!-- 壁纸预览区域 -->
            <div class="poster-preview" id="posterPreviewSection">
                <div style="background: #f5f5f5; height: 300px; border-radius: 8px; position: relative; overflow: hidden; display: flex; justify-content: center; align-items: center; margin-bottom: 15px;">
                    <div id="posterPlaceholder" style="display: none;"></div>
                    <canvas id="posterCanvas" style="display: none; max-width: 100%; max-height: 100%; object-fit: contain; box-shadow: 0 5px 15px rgba(0,0,0,0.1);"></canvas>
                    <div id="posterLoading" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.8); display: none; justify-content: center; align-items: center;">
                        <div style="text-align: center;">
                            <div class="loader"></div>
                            <p style="margin-top: 10px; color: #5D5CDE;">生成中...</p>
                        </div>
                    </div>
                </div>
                
                <!-- 风格按钮选择区域 -->
                <div style="margin-bottom: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 10px; color: #9b7d56; text-align: center;">選擇壁紙樣式</h3>
                    <div class="style-buttons-container">
                        <button class="style-button xuan-button active" data-style="xuan">宣紙</button>
                        <button class="style-button mo-button" data-style="mo">墨韻</button>
                        <button class="style-button qinghua-button" data-style="qinghua">青花</button>
                        <button class="style-button danqing-button" data-style="danqing">丹心</button>
                        <button class="style-button songyan-button" data-style="songyan">松煙</button>
                        <button class="style-button zhujian-button" data-style="zhujian">竹簡</button>
                    </div>
                </div>
                
                <!-- 下载按钮 -->
                <div style="text-align: center; margin-top: 15px; margin-bottom: 10px;">
                    <button id="downloadPosterBtn" class="setting-button download-btn">下載壁紙</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* 壁紙生成模態窗口樣式 */
.setting-button {
    padding: 10px 15px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 5px;
}

.generate-btn {
    background: linear-gradient(45deg, #9b7d56 0%, #5c3c10 100%);
    color: white;
}

.generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(155, 125, 86, 0.3);
}

.download-btn {
    background: linear-gradient(45deg, #9b7d56 0%, #5c3c10 100%);
    color: white;
    display: inline-block;
    padding: 10px 25px;
}

.dark-mode .download-btn {
    background: linear-gradient(45deg, #9b7d56 0%, #5c3c10 100%);
    color: #ffffff;
}

.download-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(93, 92, 222, 0.3);
}

.download-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.loader {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #5D5CDE;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 2s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* 风格按钮样式 */
.style-buttons-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 8px;
    margin-bottom: 15px;
}

.style-button {
    padding: 12px 18px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 2px solid #e0e0e0;
    min-width: 110px;
    text-align: center;
}

.style-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.style-button.active {
    border-color: #5D5CDE;
    box-shadow: 0 0 0 2px rgba(93, 92, 222, 0.5);
    background-color: rgba(93, 92, 222, 0.2);
}

/* 墨韻風格按鈕特殊處理 */
.mo-button.active {
    text-shadow: 0 0 3px #ffffff, 0 0 5px #ffffff;
    border-color: #5D5CDE;
    box-shadow: 0 0 0 2px rgba(93, 92, 222, 0.5), 0 0 10px rgba(255, 255, 255, 0.3);
}

/* 不同风格的按钮样式 */
.xuan-button {
    background-color: #f9f2dc;
    color: #333333;
    border-color: #d9b27c;
}

.mo-button {
    background-color: #1c1c1c;
    color: #e8e8e8;
    border-color: #555555;
}

.qinghua-button {
    background-color: #e8f2f7;
    color: #245a7a;
    border-color: #6b93ad;
}

.danqing-button {
    background-color: #fff2f2;
    color: #8a292d;
    border-color: #c24e54;
}

.songyan-button {
    background-color: #e6efe0;
    color: #1c4024;
    border-color: #587f5e;
}

.zhujian-button {
    background-color: #e0d4b8;
    color: #5c3c10;
    border-color: #9b7d56;
}

/* 不同风格的预览样式 */
.xuan-style {
    background-color: #f9f2dc;
    color: #333333;
}

.mo-style {
    background-color: #1c1c1c;
    color: #e8e8e8;
}

.qinghua-style {
    background-color: #e8f2f7;
    color: #245a7a;
}

.danqing-style {
    background-color: #fff2f2;
    color: #8a292d;
}

.songyan-style {
    background-color: #e6efe0;
    color: #1c4024;
}

.preview-title {
    font-size: 12px;
    margin-bottom: 5px;
    font-weight: bold;
}

.preview-author {
    font-size: 10px;
    margin-bottom: 10px;
}

.preview-content {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.preview-char {
    font-size: 14px;
    line-height: 1.2;
}

/* 响应式适配 */
@media (max-width: 768px) {
    .rhyme-modal-content {
        flex-direction: column;
        overflow-y: auto !important;
        max-height: 90vh !important;
    }
    
    .rhyme-modal-body {
        flex-direction: column !important;
    }
    
    .style-cards-container {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }
    
    #posterCanvas {
        max-width: 100% !important;
        max-height: 250px !important;
    }
}
</style>

<script>
        // 韵部选择相关变量
        window.showRhymeHints = true; // 默认显示韵脚辅助提示
        
        // 首先，确保全局函数容器存在
        window.nanfengApp = window.nanfengApp || {};
        
        // 定义移动端视图切换函数 - 必须先定义这些函数，因为selectPoem会用到它们
        // 切換到列表視圖
        window.nanfengApp.switchToListView = function() {
            console.log("切换到列表视图");
            const container = document.querySelector('.container');
            container.classList.add('view-transitioning');
            container.classList.remove('mobile-view-edit');
            container.classList.add('mobile-view-list');
            window.nanfengViewMode = 'list';
            
            // 检查元素是否存在后再操作
            const cipaiToggleText = document.getElementById('cipaiToggleText');
            if (cipaiToggleText) {
                cipaiToggleText.textContent = "開始創作";
            }
            
            // 結束過渡動畫
            setTimeout(() => {
                container.classList.remove('view-transitioning');
            }, 500);
        };
        
        // 切換到編輯視圖
        window.nanfengApp.switchToEditView = function() {
            console.log("切换到编辑视图");
            const container = document.querySelector('.container');
            container.classList.add('view-transitioning');
            container.classList.remove('mobile-view-list');
            container.classList.add('mobile-view-edit');
            window.nanfengViewMode = 'edit';
            
            // 检查元素是否存在后再操作
            const cipaiToggleText = document.getElementById('cipaiToggleText');
            if (cipaiToggleText) {
                cipaiToggleText.textContent = "查看詞牌";
            }
            
            // 結束過渡動畫
            setTimeout(() => {
                container.classList.remove('view-transitioning');
            }, 500);
        };
        
        // 定义全局selectPoem函数
        window.selectPoem = function(cipaiName, versionKey, e) {
            console.log(`调用selectPoem: ${cipaiName}, ${versionKey}`);
            
            // 移除所有作品的選中狀態
            document.querySelectorAll('.poem-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // 如果是通過點擊列表項選擇
            if (e && e.target) {
                const poemItem = e.target.closest('.poem-item');
                if (poemItem) {
                    poemItem.classList.add('active');
                }
            }
            // 否則這是通過版本切換按鈕調用的，不需要處理選中狀態
            // 系統將載入新版本，但不需要在列表中進行視覺上的更新

            currentCipai = cipaiName;
            currentVersion = versionKey;
            currentPoem = cipaiPatterns[cipaiName].versions[versionKey];
            userSelectedRhymeGroup = null; // 重置用户选择的韵部
            currentRhymeGroups = {}; // 重置韵部
            
            // 更新韵部按钮文本状态，但不自动显示韵部选择器
            updateRhymeButtonText();
            
            // 显示诗词内容
            displayPoem(cipaiName, versionKey);
            
            // 只在移動裝置上自動切換視圖 - 使用全局定义的函数
            if (window.innerWidth <= 768) {
                console.log("移動端選擇詞牌：自動切換到編輯視圖");
                try {
                    // 使用安全的方式调用视图切换函数
                    if (typeof window.nanfengApp.switchToEditView === 'function') {
                        window.nanfengApp.switchToEditView();
                    } else {
                        console.error("switchToEditView函数未正确定义在window.nanfengApp上");
                    }
                } catch (err) {
                    console.error("视图切换出错:", err);
                }
            }
        };
        
        // 填充韵部下拉菜单
        function populateRhymeGroupDropdown() {
            const dropdown = document.getElementById('rhymeGroupDropdown');
            if (!dropdown) return;
            
            // 清空现有选项，只保留第一个默认选项
            dropdown.innerHTML = '<option value="" disabled selected>請選擇詩詞韻部...</option>';
            
            // 分析词谱中的韵脚类型
            const rhymeTypes = new Set();
            if (currentPoem && currentPoem.pattern) {
                currentPoem.pattern.forEach(line => {
                    if (line.rhyme && line.rhyme.length > 0) {
                        line.rhyme.forEach(charIndex => {
                            const tone = line.tones[charIndex];
                            if (tone === '△') rhymeTypes.add('ping');
                            if (tone === '▲') rhymeTypes.add('ze');
                        });
                    }
                });
            }
            
            // 创建韵部选项
            Object.keys(rhymeDatabase).forEach(groupId => {
                const group = rhymeDatabase[groupId];
                
                // 检查该韵部是否有需要的平仄字
                let shouldShow = false;
                if ((rhymeTypes.has('ping') && group.pingChars.length > 0) || 
                    (rhymeTypes.has('ze') && group.zeChars.length > 0)) {
                    shouldShow = true;
                }
                
                if (shouldShow) {
                    const option = document.createElement('option');
                    option.value = groupId;
                    option.textContent = `${group.name} - ${group.description}`;
                    dropdown.appendChild(option);
                }
            });
            
            // 如果已经选择了韵部，预先选中它
            if (userSelectedRhymeGroup) {
                dropdown.value = userSelectedRhymeGroup;
                // 触发一次change事件，显示详情
                const event = new Event('change');
                dropdown.dispatchEvent(event);
                // 显示已选择状态
                const rhymeStatus = document.getElementById('rhymeStatus');
                const rhymeStatusText = document.getElementById('rhymeStatusText');
                if (rhymeStatus && rhymeStatusText) {
                    rhymeStatus.style.display = 'flex';
                    rhymeStatusText.textContent = `已選擇「${rhymeDatabase[userSelectedRhymeGroup].name}」韻部`;
                }
            }
        }
        
        // 关闭韵部选择模态窗口
        window.closeRhymeModal = function() {
            const modal = document.getElementById('rhymeModal');
            if (modal) {
                modal.style.display = 'none';
            }
        };
        
        // 完全重写韵部选择逻辑，移除自动弹出功能
        
        // 彻底阻断所有自动弹窗路径
        
        // 頁面加載完成後初始化
        document.addEventListener('DOMContentLoaded', function() {
            initPage();
            initMobileViewToggle();
        });
        
        // 移除冗余的韻部選擇器相關函數，統一使用displayRhymeModal作為入口點
        // 所有其他函數都已廢棄
        
        // 編輯標題功能
        function editTitle() {
            const titleDisplay = document.getElementById('titleDisplay');
            const currentName = currentTitle || currentCipai;
            
            titleDisplay.innerHTML = `
                <input type="text" class="title-input" value="${currentName}" 
                       placeholder="輸入標題" id="titleInput">
            `;
            
            const input = document.getElementById('titleInput');
            input.focus();
            input.select();
            
            const saveTitle = () => {
                currentTitle = input.value.trim();
                // 如果輸入的標題與原標題相同或為空，恢復為原標題
                if (!currentTitle || currentTitle === currentCipai) {
                    currentTitle = null;
                    titleDisplay.textContent = currentCipai;
                } else {
                    titleDisplay.textContent = currentTitle;
                }
            };
            
            input.addEventListener('blur', saveTitle);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    saveTitle();
                }
            });
        }
        
        function optimizeRhymeModalDisplay() {
            // 设置韵部选择器的标题
            const modalTitle = document.getElementById('rhymeModalTitle');
            if (modalTitle && currentCipai) {
                modalTitle.textContent = `${currentCipai}：選擇韻部`;
            }
            
            // 分析韵脚类型并优化韵部卡片显示
            const rhymeTypes = analyzeRhymeTypes();
            
            // 优化卡片显示
            const rhymeCards = document.querySelectorAll('.rhyme-card');
            rhymeCards.forEach(card => {
                const nameElem = card.querySelector('.rhyme-card-name');
                if (!nameElem) return;
                
                // 查找对应的韵部
                const name = nameElem.textContent;
                let group = Object.values(rhymeDatabase).find(g => g.name === name);
                if (!group) return;
                
                // 确定显示的韵脚类型
                let showPing = rhymeTypes.has('ping') || (!rhymeTypes.has('ping') && !rhymeTypes.has('ze'));
                let showZe = rhymeTypes.has('ze') || (!rhymeTypes.has('ping') && !rhymeTypes.has('ze'));
                
                // 更新样本容器
                const samplesContainer = card.querySelector('.rhyme-card-samples');
                if (samplesContainer) {
                    samplesContainer.innerHTML = '';
                    
                    // 平声韵脚字
                    if (showPing && group.pingChars.length > 0) {
                        const charsLimit = showZe ? 3 : 6;
                        const pingChars = group.pingChars.slice(0, charsLimit).join('、') + 
                                      (group.pingChars.length > charsLimit ? '...' : '');
                        samplesContainer.innerHTML += `<span class="rhyme-card-ping">平：${pingChars}</span>`;
                    }
                    
                    // 仄声韵脚字
                    if (showZe && group.zeChars.length > 0) {
                        const charsLimit = showPing ? 3 : 6;
                        const zeChars = group.zeChars.slice(0, charsLimit).join('、') + 
                                    (group.zeChars.length > charsLimit ? '...' : '');
                        samplesContainer.innerHTML += `<span class="rhyme-card-ze">仄：${zeChars}</span>`;
                    }
                }
            });
        }
        
        function safeShowRhymeModal() {
            console.log("🔐 安全显示韵部模态窗口");
            
            // 获取已存在的模态窗口
            let modal = document.getElementById('rhymeModal');
            
            // 如果模态窗口不存在，创建新窗口
            if (!modal) {
                console.log("🏗️ 创建新的韵部模态窗口");
                
                modal = document.createElement('div');
                modal.id = 'rhymeModal';
                modal.className = 'rhyme-modal';
                
                modal.innerHTML = `
                    <div class="rhyme-modal-content">
                        <div class="rhyme-modal-header">
                            <div class="rhyme-modal-title">選擇詩詞韻部</div>
                            <button id="rhymeModalClose" class="rhyme-modal-close">&times;</button>
                        </div>
                        
                        <div class="rhyme-modal-body">
                            <div class="rhyme-info-panel">
                                <div id="rhymeTypeInfo"></div>
                            </div>
                            
                            <div class="rhyme-cards-container" id="rhymeCardsContainer">
                                <!-- 韵部卡片将由JavaScript生成 -->
                            </div>
                            
                            <div class="rhyme-settings">
                                <label class="rhyme-toggle">
                                    <span class="rhyme-toggle-switch">
                                        <input type="checkbox" id="rhymeHintToggle" checked>
                                        <span class="rhyme-toggle-slider"></span>
                                    </span>
                                    顯示韻腳輔助提示字
                                </label>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
            }
            
            // 分析词谱中的韵脚类型
            const rhymeTypes = new Set();
            if (currentPoem && currentPoem.pattern) {
                currentPoem.pattern.forEach(line => {
                    if (line.rhyme && line.rhyme.length > 0) {
                        line.rhyme.forEach(charIndex => {
                            const tone = line.tones[charIndex];
                            if (tone === '△') rhymeTypes.add('ping');
                            if (tone === '▲') rhymeTypes.add('ze');
                        });
                    }
                });
            }
            
            // 更新韵部类型信息
            const rhymeTypeInfo = document.getElementById('rhymeTypeInfo');
            if (rhymeTypeInfo) {
                let typeText = "當前詞牌需要";
                if (rhymeTypes.has('ping') && rhymeTypes.has('ze')) {
                    typeText += "平聲韻和仄聲韻";
                } else if (rhymeTypes.has('ping')) {
                    typeText += "平聲韻";
                } else if (rhymeTypes.has('ze')) {
                    typeText += "仄聲韻";
                } else {
                    typeText += "未指定韻部";
                }
                rhymeTypeInfo.textContent = typeText;
            }
            
            // 渲染韵部卡片
            const cardsContainer = document.getElementById('rhymeCardsContainer');
            if (cardsContainer) {
                cardsContainer.innerHTML = '';
                
                // 创建韵部卡片
                Object.keys(rhymeDatabase).forEach(groupId => {
                    const group = rhymeDatabase[groupId];
                    
                    // 检查该韵部是否有需要的平仄字
                    let shouldShow = false;
                    if ((rhymeTypes.has('ping') && group.pingChars.length > 0) || 
                        (rhymeTypes.has('ze') && group.zeChars.length > 0)) {
                        shouldShow = true;
                    }
                    
                    if (shouldShow) {
                        const card = document.createElement('div');
                        card.className = 'rhyme-card';
                        if (userSelectedRhymeGroup == groupId) {
                            card.classList.add('selected');
                        }
                        
                        // 提取示例字符
                        const pingChars = group.pingChars.slice(0, 3).join('、');
                        const zeChars = group.zeChars.slice(0, 3).join('、');
                        
                        card.innerHTML = `
                            <div class="rhyme-card-name">${group.name}</div>
                            <div class="rhyme-card-desc">${group.description}</div>
                            <div class="rhyme-card-samples">
                                ${group.pingChars.length > 0 ? `<span class="rhyme-card-ping">平：${pingChars}</span>` : ''}
                                ${group.zeChars.length > 0 ? `<span class="rhyme-card-ze">仄：${zeChars}</span>` : ''}
                            </div>
                        `;
                        
                        // 添加点击事件
                        card.addEventListener('click', () => {
                            // 移除所有卡片的选中状态
                            document.querySelectorAll('.rhyme-card').forEach(c => {
                                c.classList.remove('selected');
                            });
                            
                            // 设置当前卡片为选中状态
                            card.classList.add('selected');
                            
                            // 保存选择的韵部
                            userSelectedRhymeGroup = groupId;
                            
                            // 应用选择的韵部
                            applyUserSelectedRhymeGroup();
                            
                            // 更新韵部按钮文本
                            updateRhymeButtonText();
                            
                            // 关闭模态窗口
                            closeRhymeModal();
                        });
                        
                        cardsContainer.appendChild(card);
                    }
                });
            }
            
            // 为关闭按钮添加事件
            const closeBtn = document.getElementById('rhymeModalClose');
            if (closeBtn) {
                closeBtn.onclick = closeRhymeModal;
            }
            
            // 为韵部提示开关添加事件
            const hintToggle = document.getElementById('rhymeHintToggle');
            if (hintToggle) {
                hintToggle.checked = window.showRhymeHints !== false; // 默认为true
                hintToggle.onchange = function() {
                    window.showRhymeHints = this.checked;
                };
            }
            
            // 显示模态窗口
            modal.style.display = 'flex';
        }
        
        // 新增直接显示韵部模态窗口的函数，避免使用可能被篡改的函数
        function directShowRhymeModal(isUserTriggered, forceExecute) {
            console.log("直接显示韵部模态窗口，isUserTriggered:", isUserTriggered, "forceExecute:", forceExecute);
            
            // 只有在明确用户触发且强制执行的情况下才显示
            if (isUserTriggered !== true || forceExecute !== true) {
                console.log("拒绝显示韵部模态窗口 - 不满足严格条件");
                return false;
            }
            
            // 立即设置标题为当前词牌名称
            console.log("设置韵部选择器标题为当前词牌:", currentCipai);
            
            // 获取已存在的模态窗口标题元素
            const modalTitle = document.getElementById('rhymeModalTitle');
            if (modalTitle && currentCipai) {
                modalTitle.textContent = `${currentCipai}：選擇韻部`;
            }
            
            // 执行优化韵部选择器显示的函数
            optimizeRhymeModalDisplay();
            
            // 获取已存在的模态窗口
            let modal = document.getElementById('rhymeModal');
            
            // 如果模态窗口不存在，创建新窗口
            if (!modal) {
                console.log("创建新的韵部模态窗口");
                
                modal = document.createElement('div');
                modal.id = 'rhymeModal';
                modal.className = 'rhyme-modal';
                
                modal.innerHTML = `
                    <div class="rhyme-modal-content">
                        <div class="rhyme-modal-header">
                            <div class="rhyme-modal-title">選擇詩詞韻部</div>
                            <button id="rhymeModalClose" class="rhyme-modal-close">&times;</button>
                        </div>
                        
                        <div class="rhyme-modal-body">
                            <div class="rhyme-info-panel">
                                <div id="rhymeTypeInfo"></div>
                            </div>
                            
                            <div class="rhyme-cards-container" id="rhymeCardsContainer">
                                <!-- 韵部卡片将由JavaScript生成 -->
                            </div>
                            
                            <div class="rhyme-settings">
                                <label class="rhyme-toggle">
                                    <span class="rhyme-toggle-switch">
                                        <input type="checkbox" id="rhymeHintToggle" checked>
                                        <span class="rhyme-toggle-slider"></span>
                                    </span>
                                    顯示韻腳輔助提示字
                                </label>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
            }
            
            // 分析词谱中的韵脚类型
            const rhymeTypes = new Set();
            if (currentPoem && currentPoem.pattern) {
                currentPoem.pattern.forEach(line => {
                    if (line.rhyme && line.rhyme.length > 0) {
                        line.rhyme.forEach(charIndex => {
                            const tone = line.tones[charIndex];
                            if (tone === '△') rhymeTypes.add('ping');
                            if (tone === '▲') rhymeTypes.add('ze');
                        });
                    }
                });
            }
            
            // 更新韵部类型信息
            const rhymeTypeInfo = document.getElementById('rhymeTypeInfo');
            if (rhymeTypeInfo) {
                let typeText = "當前詞牌需要";
                if (rhymeTypes.has('ping') && rhymeTypes.has('ze')) {
                    typeText += "平聲韻和仄聲韻";
                } else if (rhymeTypes.has('ping')) {
                    typeText += "平聲韻";
                } else if (rhymeTypes.has('ze')) {
                    typeText += "仄聲韻";
                } else {
                    typeText += "未指定韻部";
                }
                rhymeTypeInfo.textContent = typeText;
            }
            
            // 渲染韵部卡片
            const cardsContainer = document.getElementById('rhymeCardsContainer');
            if (cardsContainer) {
                cardsContainer.innerHTML = '';
                
                // 创建韵部卡片
                Object.keys(rhymeDatabase).forEach(groupId => {
                    const group = rhymeDatabase[groupId];
                    
                    // 检查该韵部是否有需要的平仄字
                    let shouldShow = false;
                    if ((rhymeTypes.has('ping') && group.pingChars.length > 0) || 
                        (rhymeTypes.has('ze') && group.zeChars.length > 0)) {
                        shouldShow = true;
                    }
                    
                    if (shouldShow) {
                        const card = document.createElement('div');
                        card.className = 'rhyme-card';
                        if (userSelectedRhymeGroup == groupId) {
                            card.classList.add('selected');
                        }
                        
                        // 提取示例字符
                        const pingChars = group.pingChars.slice(0, 3).join('、');
                        const zeChars = group.zeChars.slice(0, 3).join('、');
                        
                        card.innerHTML = `
                            <div class="rhyme-card-name">${group.name}</div>
                            <div class="rhyme-card-desc">${group.description}</div>
                            <div class="rhyme-card-samples">
                                ${group.pingChars.length > 0 ? `<span class="rhyme-card-ping">平：${pingChars}</span>` : ''}
                                ${group.zeChars.length > 0 ? `<span class="rhyme-card-ze">仄：${zeChars}</span>` : ''}
                            </div>
                        `;
                        
                        // 添加点击事件
                        card.addEventListener('click', () => {
                            // 移除所有卡片的选中状态
                            document.querySelectorAll('.rhyme-card').forEach(c => {
                                c.classList.remove('selected');
                            });
                            
                            // 设置当前卡片为选中状态
                            card.classList.add('selected');
                            
                            // 保存选择的韵部
                            userSelectedRhymeGroup = groupId;
                            
                            // 应用选择的韵部
                            applyUserSelectedRhymeGroup();
                            
                            // 更新韵部按钮文本
                            updateRhymeButtonText();
                            
                            // 关闭模态窗口
                            closeRhymeModal();
                        });
                        
                        cardsContainer.appendChild(card);
                    }
                });
            }
            
            // 为关闭按钮添加事件
            const closeBtn = document.getElementById('rhymeModalClose');
            if (closeBtn) {
                closeBtn.onclick = closeRhymeModal;
            }
            
            // 为韵部提示开关添加事件
            const hintToggle = document.getElementById('rhymeHintToggle');
            if (hintToggle) {
                hintToggle.checked = window.showRhymeHints !== false; // 默认为true
                hintToggle.onchange = function() {
                    window.showRhymeHints = this.checked;
                };
            }
            
            // 优化韵部选择器显示
            optimizeRhymeModalDisplay();
            
            // 显示模态窗口
            modal.style.display = 'flex';
            return true;
        }
        
        // 完全覆盖原有的showRhymeModal函数，使其永远不会自动弹出
        window.showRhymeModal = function(isUserTriggered) {
            console.log("拦截showRhymeModal调用，isUserTriggered:", isUserTriggered);
            
            // 如果全局禁用了自动韵部模态窗口，则永远不自动弹出
            if (window.autoRhymeModalDisabled) {
                console.log("全局禁用了自动韵部模态窗口，拒绝显示");
                return false;
            }
            
            // 如果不是用户明确触发，则拒绝显示
            if (isUserTriggered !== true) {
                console.log("非用户触发的韵部模态窗口请求，拒绝显示");
                return false;
            }
            
            // 如果是用户触发，则调用新的直接显示函数
            return directShowRhymeModal(true, true);
        };
        
        // 完全禁用自动调用showRhymeGroupSelector
        window.showRhymeGroupSelector = function() {
            console.log("拦截showRhymeGroupSelector调用，该函数已被禁用");
            // 只更新按钮文本，不做其他任何操作
            updateRhymeButtonText();
            return false;
        };
        
        // 添加辅助函数来设置韵部选择器标题和优化韵部卡片显示
        function enhanceRhymeModalDisplay() {
            // 1. 设置标题为当前词牌名称
            const modalTitle = document.getElementById('rhymeModalTitle');
            if (modalTitle && currentCipai) {
                modalTitle.textContent = `${currentCipai}：選擇韻部`;
            }
            
            // 2. 分析当前词牌需要的韵脚类型
            const rhymeTypes = new Set();
            if (currentPoem && currentPoem.pattern) {
                currentPoem.pattern.forEach(line => {
                    if (line.rhyme && line.rhyme.length > 0) {
                        line.rhyme.forEach(charIndex => {
                            const tone = line.tones[charIndex];
                            if (tone === '△') rhymeTypes.add('ping');
                            if (tone === '▲') rhymeTypes.add('ze');
                        });
                    }
                });
            }
            
            // 3. 优化韵部卡片显示
            const rhymeCards = document.querySelectorAll('.rhyme-card');
            rhymeCards.forEach(card => {
                const groupId = card.dataset.groupId;
                if (groupId && rhymeDatabase[groupId]) {
                    const group = rhymeDatabase[groupId];
                    
                    // 确定要显示哪些类型的韵脚字
                    let showPing = rhymeTypes.has('ping');
                    let showZe = rhymeTypes.has('ze');
                    
                    // 如果都没有指定，则都显示
                    if (!showPing && !showZe) {
                        showPing = true;
                        showZe = true;
                    }
                    
                    // 获取样本容器
                    const samplesContainer = card.querySelector('.rhyme-card-samples');
                    if (samplesContainer) {
                        samplesContainer.innerHTML = '';
                        
                        // 显示平声韵脚字
                        if (showPing && group.pingChars.length > 0) {
                            const pingChars = group.pingChars.slice(0, 6).join('、') + (group.pingChars.length > 6 ? '...' : '');
                            const pingSpan = document.createElement('span');
                            pingSpan.className = 'rhyme-card-ping';
                            pingSpan.textContent = `平：${pingChars}`;
                            samplesContainer.appendChild(pingSpan);
                        }
                        
                        // 显示仄声韵脚字
                        if (showZe && group.zeChars.length > 0) {
                            const zeChars = group.zeChars.slice(0, 6).join('、') + (group.zeChars.length > 6 ? '...' : '');
                            const zeSpan = document.createElement('span');
                            zeSpan.className = 'rhyme-card-ze';
                            zeSpan.textContent = `仄：${zeChars}`;
                            samplesContainer.appendChild(zeSpan);
                        }
                    }
                }
            });
        }
        
        // 更新韵部选择按钮文本
        function updateRhymeButtonText() {
            const button = document.getElementById('rhymeSelectButton');
            if (!button) return;
            
            if (userSelectedRhymeGroup && rhymeDatabase[userSelectedRhymeGroup]) {
                const groupName = rhymeDatabase[userSelectedRhymeGroup].name;
                button.innerHTML = `
                    <span class="music-icon">🎵</span>
                    已選：${groupName}
                `;
                button.classList.add('selected');
            } else {
                button.innerHTML = `
                    <span class="music-icon" style="filter: grayscale(100%) brightness(0);">🎵</span>
                    選擇韻部
                `;
                button.classList.remove('selected');
            }
        }
        
        // 基於詞庫和欽定詞譜的詞牌格律數據
        const cipaiPatterns = {
            "五言絕句": {
                totalChars: 20,
                versions: {
                    "類型一·王勃": {
                        author: "王勃",
                        content: "長江悲已滯，萬里念將歸。況屬高秋晚，山中黃葉飛。",
                        pattern: [
                            { text: "長江悲已滯", tones: "⊙○○●●", rhyme: [] },
                            { text: "萬里念將歸", tones: "⊙●●○△", rhyme: [4] },
                            { text: "況屬高秋晚", tones: "⊙●○○●", rhyme: [] },
                            { text: "山中黃葉飛", tones: "○○●●△", rhyme: [4] }
                        ]
                    },
                    "類型二·李白": {
                        author: "李白",
                        content: "床前明月光，疑是地上霜。舉頭望明月，低頭思故鄉。",
                        pattern: [
                            { text: "床前明月光", tones: "○○●●△", rhyme: [4] },
                            { text: "疑是地上霜", tones: "⊙●●○△", rhyme: [4] },
                            { text: "舉頭望明月", tones: "⊙●○○●", rhyme: [] },
                            { text: "低頭思故鄉", tones: "○○●●△", rhyme: [4] }
                        ]
                    },
                    "類型三·韋承慶": {
                        author: "韋承慶",
                        content: "萬里人南去，三春雁北飛。不知何歲月，得與爾同歸。",
                        pattern: [
                            { text: "萬里人南去", tones: "⊙●○○●", rhyme: [] },
                            { text: "三春雁北飛", tones: "○○●●△", rhyme: [4] },
                            { text: "不知何歲月", tones: "⊙○○●●", rhyme: [] },
                            { text: "得與爾同歸", tones: "⊙●●○△", rhyme: [4] }
                        ]
                    },
                    "類型四·盧綸": {
                        author: "盧綸",
                        content: "林暗草驚風，將軍夜引弓。平明尋白羽，沒在石棱中。",
                        pattern: [
                            { text: "林暗草驚風", tones: "⊙●●○△", rhyme: [4] },
                            { text: "將軍夜引弓", tones: "○○●●△", rhyme: [4] },
                            { text: "平明尋白羽", tones: "⊙○○●●", rhyme: [] },
                            { text: "沒在石棱中", tones: "⊙●●○△", rhyme: [4] }
                        ]
                    }
                }
            },
            
            "七言絕句": {
                totalChars: 28,
                versions: {
                    "類型一·竇巩": {
                        author: "竇巩",
                        content: "傷心欲問前朝事，惟見江流去不回。日暮東風春草綠，鷓鴣飛上越王台。",
                        pattern: [
                            { text: "傷心欲問前朝事", tones: "⊙○⊙●○○●", rhyme: [] },
                            { text: "惟見江流去不回", tones: "⊙●○○●●△", rhyme: [6] },
                            { text: "日暮東風春草綠", tones: "⊙●⊙○○●●", rhyme: [] },
                            { text: "鷓鴣飛上越王台", tones: "⊙○⊙●●○△", rhyme: [6] }
                        ]
                    },
                    "類型二·王昌齡": {
                        author: "王昌齡",
                        content: "秦時明月漢時關，萬里長征人未還。但使龍城飛將在，不教胡馬度陰山。",
                        pattern: [
                            { text: "秦時明月漢時關", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "萬里長征人未還", tones: "⊙●○○●●△", rhyme: [6] },
                            { text: "但使龍城飛將在", tones: "⊙●⊙○○●●", rhyme: [] },
                            { text: "不教胡馬度陰山", tones: "⊙○⊙●●○△", rhyme: [6] }
                        ]
                    },
                    "類型三·王維": {
                        author: "王維",
                        content: "獨在異鄉為異客，每逢佳節倍思親。遙知兄弟登高處，遍插茱萸少一人。",
                        pattern: [
                            { text: "獨在異鄉為異客", tones: "⊙●⊙○○●●", rhyme: [] },
                            { text: "每逢佳節倍思親", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "遙知兄弟登高處", tones: "⊙○⊙●○○●", rhyme: [] },
                            { text: "遍插茱萸少一人", tones: "⊙●○○●●△", rhyme: [6] }
                        ]
                    },
                    "類型四·王昌齡": {
                        author: "王昌齡",
                        content: "青海長雲暗雪山，孤城遙望玉門關。黃沙百戰穿金甲，不破樓蘭終不還！",
                        pattern: [
                            { text: "青海長雲暗雪山", tones: "⊙●○○●●△", rhyme: [6] },
                            { text: "孤城遙望玉門關", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "黃沙百戰穿金甲", tones: "⊙○⊙●○○●", rhyme: [] },
                            { text: "不破樓蘭終不還", tones: "⊙●○○●●△", rhyme: [6] }
                        ]
                    }
                }
            },
            
            "五言律詩": {
                totalChars: 40,
                versions: {
                    "類型一·李白": {
                        author: "李白",
                        content: "青山橫北郭，白水繞孤城。此地一為別，孤蓬萬里征。浮雲游子意，落日故人情。揮手自茲去，蕭蕭班馬鳴。",
                        pattern: [
                            { text: "青山橫北郭", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "白水繞孤城", tones: "⊙●●○△", rhyme: [4] },
                            { text: "此地一為別", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "孤蓬萬里征", tones: "○○⊙●△", rhyme: [4] },
                            { text: "浮雲游子意", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "落日故人情", tones: "⊙●●○△", rhyme: [4] },
                            { text: "揮手自茲去", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "蕭蕭班馬鳴", tones: "○○⊙●△", rhyme: [4] }
                        ]
                    },
                    "類型二·李商隱": {
                        author: "李商隱",
                        content: "深居俯夾城，春去夏猶清。天意憐幽草，人間重晚晴。並添高閣回，微注小窗明。越鳥巢乾後，歸飛體更輕。",
                        pattern: [
                            { text: "深居俯夾城", tones: "○○⊙●△", rhyme: [4] },
                            { text: "春去夏猶清", tones: "⊙●●○△", rhyme: [4] },
                            { text: "天意憐幽草", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "人間重晚晴", tones: "○○⊙●△", rhyme: [4] },
                            { text: "並添高閣回", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "微注小窗明", tones: "⊙●●○△", rhyme: [4] },
                            { text: "越鳥巢乾後", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "歸飛體更輕", tones: "○○⊙●△", rhyme: [4] }
                        ]
                    },
                    "類型三·杜甫": {
                        author: "杜甫",
                        content: "國破山河在，城春草木深。感時花濺淚，恨別鳥驚心。烽火連三月，家書抵萬金。白頭搔更短，渾欲不勝簪。",
                        pattern: [
                            { text: "國破山河在", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "城春草木深", tones: "○○⊙●△", rhyme: [4] },
                            { text: "感時花濺淚", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "恨別鳥驚心", tones: "⊙●●○△", rhyme: [4] },
                            { text: "烽火連三月", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "家書抵萬金", tones: "○○⊙●△", rhyme: [4] },
                            { text: "白頭搔更短", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "渾欲不勝簪", tones: "⊙●●○△", rhyme: [4] }
                        ]
                    },
                    "類型四·王維": {
                        author: "王維",
                        content: "太乙近天都，連山到海隅。白雲回望合，青靄入看無。分野中峰變，陰晴眾壑殊。欲投人處宿，隔水問樵夫。",
                        pattern: [
                            { text: "太乙近天都", tones: "⊙●●○△", rhyme: [4] },
                            { text: "連山到海隅", tones: "○○⊙●△", rhyme: [4] },
                            { text: "白雲回望合", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "青靄入看無", tones: "⊙●●○△", rhyme: [4] },
                            { text: "分野中峰變", tones: "⊙●⊙○●", rhyme: [] },
                            { text: "陰晴眾壑珠", tones: "○○⊙●△", rhyme: [4] },
                            { text: "欲投人處宿", tones: "⊙○⊙●●", rhyme: [] },
                            { text: "隔水問樵夫", tones: "⊙●●○△", rhyme: [4] }
                        ]
                    }
                }
            },
            
            "七言律詩": {
                totalChars: 56,
                versions: {
                    "類型一·杜甫": {
                        author: "杜甫",
                        content: "舍南舍北皆春水，但見群鷗日日來。花徑不曾緣客掃，蓬門今始為君開。盤飧市遠無兼味，樽酒家貧只舊醅。肯與鄰翁相對飲，隔籬呼取盡餘杯。",
                        pattern: [
                            { text: "舍南舍北皆春水", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "但見群鷗日日來", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "花徑不曾緣客掃", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "蓬門今始為君開", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "盤飧市遠無兼味", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "樽酒家貧只舊醅", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "肯與鄰翁相對飲", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "隔籬呼取盡餘杯", tones: "⊙○⊙●●○△", rhyme: [6] }
                        ]
                    },
                    "類型二·韓愈": {
                        author: "韓愈",
                        content: "一封朝奏九重天，夕貶潮州路八千。欲為聖明除弊事，肯將衰朽惜殘年。雲橫秦嶺家何在？雪擁藍關馬不前。知汝遠來應有意，好收吾骨瘴江邊。",
                        pattern: [
                            { text: "一封朝奏九重天", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "夕貶潮州路八千", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "欲為聖明除弊事", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "肯將衰朽惜殘年", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "雲橫秦嶺家何在", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "雪擁藍關馬不前", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "知汝遠來應有意", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "好收吾骨瘴江邊", tones: "⊙○⊙●●○△", rhyme: [6] }
                        ]
                    },
                    "類型三·杜甫": {
                        author: "杜甫",
                        content: "諸葛大名垂宇宙，宗臣遺像肅清高。三分割據紆籌策，萬古雲霄一羽毛。伯仲之間見伊呂，指揮若定失蕭曹。運移漢祚終難復，志決身歼軍務勞。",
                        pattern: [
                            { text: "諸葛大名垂宇宙", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "宗臣遺像肅清高", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "三分割據紆籌策", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "萬古雲霄一羽毛", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "伯仲之間見伊呂", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "指揮若定失蕭曹", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "運移漢祚終難復", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "志決身歼軍務勞", tones: "⊙●○○⊙●△", rhyme: [6] }
                        ]
                    },
                    "類型四·杜甫": {
                        author: "杜甫",
                        content: "風急天高猿嘯哀，渚清沙白鳥飛迴。無邊落木蕭蕭下，不盡長江滾滾來。萬里悲秋常作客，百年多病獨登台。艱難苦恨繁霜鬢，潦倒新停濁酒杯。",
                        pattern: [
                            { text: "風急天高猿嘯哀", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "渚清沙白鳥飛迴", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "無邊落木蕭蕭下", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "不盡長江滾滾來", tones: "⊙●○○⊙●△", rhyme: [6] },
                            { text: "萬里悲秋常作客", tones: "⊙●⊙○⊙●●", rhyme: [] },
                            { text: "百年多病獨登台", tones: "⊙○⊙●●○△", rhyme: [6] },
                            { text: "艱難苦恨繁霜鬢", tones: "⊙○⊙●⊙○●", rhyme: [] },
                            { text: "潦倒新停濁酒杯", tones: "⊙●○○⊙●△", rhyme: [6] }
                        ]
                    }
                }
            }
        };

        // 完整韻部數據庫（基於詞林正韻，擴充版）
        const rhymeDatabase = {
    1: { // 一啊 a, ia, ua
        name: "一啊",
        description: "韻母 a, ia, ua",
        pingChars: [
            // 阴平前20字
            "花", "家", "壓", "發", "沙", "鴉", "佳", "紗", "麻", "加", "嘉", "瓜", "嘩", "砂", "答", "蛙", "誇", "他", "差", "八",
            // 阳平前20字
            "華", "涯", "霞", "茶", "暇", "麻", "芽", "牙", "嘩", "峽", "崖", "衙", "伐", "答", "雜", "頰", "匣", "俠", "乏", "叉"
        ],
        zeChars: [] // 添加空的仄声字数组
    },
    2: { // 二喔 o, uo
        name: "二喔",
        description: "韻母 o, uo",
        pingChars: [
            // 阴平前20字
            "多", "波", "剝", "拙", "郭", "托", "泊", "坡", "脫", "梭", "窩", "頗", "撥", "渦", "潑", "蝸", "捉", "拖", "摸", "鍋",
            // 阳平前20字
            "國", "羅", "蘿", "磨", "酌", "泊", "伯", "活", "昨", "魔", "螺", "薄", "奪", "摩", "駝", "博", "灼", "婆", "渤", "摹"
        ]
    },
    3: { // 三鹅 e, ie, üe
        name: "三鵝",
        description: "韻母 e, ie, üe",
        pingChars: [
            // 阴平前20字
            "歌", "車", "戈", "遮", "科", "阿", "奢", "顆", "折", "麼", "割", "呵", "苛", "哥", "鴿", "得", "蝌", "擱", "磕", "呢",
            // 阳平前20字
            "得", "和", "哦", "何", "擇", "合", "河", "殼", "閣", "隔", "峨", "轍", "舌", "荷", "哲", "娥", "責", "德", "澤", "訛"
        ]
    },
    4: { // 四衣 i
        name: "四衣",
        description: "韻母 i",
        pingChars: [
            // 阴平前20字
            "幾", "衣", "期", "息", "稀", "西", "奇", "機", "夕", "低", "溪", "依", "惜", "棲", "一", "雞", "堤", "滴", "欺", "披",
            // 阳平前20字
            "泥", "齊", "奇", "急", "極", "啼", "移", "迷", "離", "宜", "席", "疑", "集", "笛", "旗", "題", "夷", "疾", "敵", "儀"
        ]
    },
    5: { // 五乌 u
        name: "五烏",
        description: "韻母 u",
        pingChars: [
            // 阴平前20字
            "書", "疏", "屋", "初", "夫", "孤", "珠", "殊", "枯", "舒", "哭", "窟", "呼", "蘇", "都", "烏", "株", "蔬", "出", "忽",
            // 阳平前20字
            "無", "竹", "圖", "如", "浮", "廬", "湖", "熟", "夫", "俗", "徒", "除", "途", "壺", "燭", "足", "服", "儒", "獨", "蕪"
        ]
    },
    6: { // 六迂 ü
        name: "六迂",
        description: "韻母 ü",
        pingChars: [
            // 阴平前20字
            "居", "虛", "須", "墟", "趨", "驅", "軀", "駒", "屈", "吁", "迂", "區", "拘", "嶇", "曲", "需", "鞠", "戌", "淤", "且",
            // 阳平前20字
            "魚", "隅", "菊", "渠", "娛", "愚", "局", "餘", "予", "漁", "輿", "徐", "驢", "橘", "榆", "渝", "於", "愉", "逾", "與"
        ]
    },
    7: { // 七哀 ai, uai
        name: "七哀",
        description: "韻母 ai, uai",
        pingChars: [
            // 阴平前20字
            "開", "台", "哀", "苔", "哉", "埃", "衰", "猜", "栽", "齋", "胎", "乖", "災", "腮", "拍", "拆", "該", "呆", "揩", "篩",
            // 阳平前20字
            "來", "台", "白", "才", "苔", "宅", "懷", "徊", "萊", "材", "裁", "排", "淮", "埋", "槐", "孩", "財", "柴", "牌", "豺"
        ]
    },
    8: { // 八欸 ei, ui
        name: "八欸",
        description: "韻母 ei, ui",
        pingChars: [
            // 阴平前20字
            "歸", "飛", "微", "杯", "悲", "非", "催", "輝", "灰", "吹", "黑", "碑", "堆", "危", "威", "摧", "窺", "薇", "追", "規",
            // 阳平前20字
            "回", "違", "垂", "肥", "梅", "眉", "誰", "雷", "隨", "為", "圍", "帷", "陪", "賊", "媒", "頹", "維", "魁", "枚", "葵"
        ]
    },
    9: { // 九熬 ao, iao
        name: "九熬",
        description: "韻母 ao, iao",
        pingChars: [
            // 阴平前20字
            "高", "朝", "消", "霄", "濤", "招", "交", "刀", "騷", "腰", "蕭", "飄", "宵", "簫", "銷", "驕", "郊", "操", "梢", "遭",
            // 阳平前20字
            "調", "嚼", "朝", "遙", "橋", "勞", "潮", "豪", "寥", "毛", "條", "袍", "曹", "毫", "巢", "搖", "桃", "饒", "苗", "逃"
        ]
    },
    10: { // 十欧 ou, iu
        name: "十歐",
        description: "韻母 ou, iu",
        pingChars: [
            // 阴平前20字
            "尤", "流", "留", "由", "油", "遊", "牛", "修", "秋", "周", "州", "舟", "收", "求", "浮", "頭", "投", "溝", "幽", "休",
            // 阳平前20字
            "流", "遊", "頭", "愁", "樓", "留", "求", "侯", "謀", "牛", "酬", "由", "投", "籌", "柔", "稠", "軸", "疇", "尤", "囚"
        ]
    },
    11: { // 十一安 an, ian, uan, üan
        name: "十一安",
        description: "韻母 an, ian, uan, üan",
        pingChars: [
            // 阴平前20字
            "山", "天", "煙", "間", "邊", "關", "仙", "安", "川", "歡", "篇", "看", "寬", "乾", "端", "官", "攀", "冠", "斑", "喧",
            // 阳平前20字
            "還", "難", "南", "年", "寒", "然", "前", "言", "船", "眠", "泉", "賢", "顏", "傳", "田", "憐", "閒", "殘", "錢", "園"
        ]
    },
    12: { // 十二恩 en, in, un, ün
        name: "十二恩",
        description: "韻母 en, in, un, ün",
        pingChars: [
            // 阴平前20字
            "心", "春", "深", "新", "身", "陰", "君", "真", "音", "親", "昏", "分", "村", "金", "尊", "津", "根", "孫", "恩", "今",
            // 阳平前20字
            "人", "雲", "塵", "門", "林", "神", "吟", "聞", "尋", "文", "存", "魂", "群", "臣", "鄰", "貧", "琴", "痕", "頻", "民"
        ]
    },
    13: { // 十三昂 ang, iang, uang
        name: "十三昂",
        description: "韻母 ang, iang, uang",
        pingChars: [
            // 阴平前20字
            "香", "光", "鄉", "霜", "方", "章", "芳", "傷", "荒", "裳", "蒼", "妝", "江", "桑", "窗", "央", "囊", "雙", "岡", "張",
            // 阳平前20字
            "長", "行", "陽", "涼", "堂", "黃", "腸", "郎", "茫", "忙", "狂", "床", "裳", "王", "梁", "常", "藏", "翔", "房", "牆"
        ]
    },
    14: { // 十四英 eng, ing
        name: "十四英",
        description: "韻母 eng, ing",
        pingChars: [
            // 阴平前20字
            "風", "生", "聲", "清", "青", "翁", "峰", "輕", "驚", "星", "兵", "傾", "經", "京", "英", "耕", "燈", "聽", "冰", "僧",
            // 阳平前20字
            "行", "橫", "情", "明", "城", "名", "成", "鳴", "平", "晴", "亭", "程", "靈", "營", "冥", "庭", "迎", "形", "蓬", "陵"
        ]
    },
    15: { // 十五雍 ong, iong
        name: "十五雍",
        description: "韻母 ong, iong",
        pingChars: [
            // 阴平前20字
            "中", "紅", "東", "宮", "公", "通", "空", "功", "鐘", "松", "工", "蹤", "終", "宗", "兄", "弓", "胸", "匆", "冬", "忠",
            // 阳平前20字
            "重", "紅", "同", "窮", "龍", "雄", "容", "榮", "濃", "鴻", "叢", "從", "蓉", "融", "虹", "童", "桐", "蟲", "農", "戎"
        ]
    },
















        };
        
        // 為方便查詢，我們將平仄各自合併
        // 確保每個韻部對象都有zeChars屬性
        Object.keys(rhymeDatabase).forEach(groupId => {
            if (!rhymeDatabase[groupId].zeChars) {
                rhymeDatabase[groupId].zeChars = [];
            }
        });

        const flattenedRhymeChars = {};
        Object.keys(rhymeDatabase).forEach(groupId => {
            const group = rhymeDatabase[groupId];
            flattenedRhymeChars[groupId] = {
                ping: [...group.pingChars],
                ze: [...group.zeChars],
                all: [...group.pingChars, ...group.zeChars]
            };
        });

        // 先初始化全局變量
        let currentPoem = null;
        let currentRhymeGroups = {}; // 存儲不同韻腳的韻部
        let currentAuthor = null;
        let currentTitle = null; // 用戶自定義的標題
        let modifiedChars = new Set();
        let currentCipai = null;
        let currentVersion = null;
        let userSelectedRhymeGroup = null; // 用户选择的韵部

        // 初始化頁面 - 移除搜索框相關功能
        function initPage() {
            renderPoemList();
            // 搜索功能已刪除
        }

        // 過濾詞牌列表
        function filterCipaiList(searchTerm) {
            const cipaiSections = document.querySelectorAll('.cipai-section');
            
            cipaiSections.forEach(section => {
                const cipaiTitle = section.querySelector('.cipai-title').textContent.toLowerCase();
                const poemItems = section.querySelectorAll('.poem-item');
                let sectionVisible = false;
                
                poemItems.forEach(item => {
                    const author = item.querySelector('.poem-title').textContent.toLowerCase();
                    const content = item.querySelector('.poem-preview').textContent.toLowerCase();
                    
                    if (cipaiTitle.includes(searchTerm) || author.includes(searchTerm) || content.includes(searchTerm)) {
                        item.style.display = 'block';
                        sectionVisible = true;
                    } else {
                        item.style.display = 'none';
                    }
                });
                
                section.style.display = sectionVisible ? 'block' : 'none';
            });
        }

        // 渲染詩歌列表 - 直接顯示四個具體分類
        function renderPoemList() {
            const poemList = document.getElementById('poemList');
            poemList.innerHTML = '';

            // 直接定義四個具體詩體類型
            const poetryTypes = ['五言絕句', '七言絕句', '五言律詩', '七言律詩'];

            // 為每個詩體類型創建一個獨立的section
            poetryTypes.forEach(poetryName => {
                if (!cipaiPatterns[poetryName]) return;
                
                const categorySection = document.createElement('div');
                categorySection.className = 'cipai-section';

                const categoryTitle = document.createElement('div');
                categoryTitle.className = 'cipai-title category-title';
                const poetryData = cipaiPatterns[poetryName];
                categoryTitle.innerHTML = `${poetryName} <span class="char-count">${poetryData.totalChars}字</span>`;
                categorySection.appendChild(categoryTitle);

                const poemListDiv = document.createElement('div');
                poemListDiv.className = 'poem-list';

                Object.keys(poetryData.versions).forEach(versionKey => {
                    const poem = poetryData.versions[versionKey];
                    const poemItem = document.createElement('div');
                    poemItem.className = 'poem-item';
                    // 添加事件对象e作为参数传递
                    poemItem.onclick = (e) => selectPoem(poetryName, versionKey, e);

                    // 版本名稱顯示（平起式/仄起式等）
                    const versionDisplay = versionKey.includes('平起') ? '平起式' : 
                                        versionKey.includes('仄起') ? '仄起式' : versionKey;

                    // 預覽內容
                    const preview = poem.content.substring(0, 20) + (poem.content.length > 20 ? '...' : '');

                    poemItem.innerHTML = `
                        <div class="poem-title">${versionDisplay}</div>
                        <div class="poem-preview">${preview}</div>
                    `;

                    poemListDiv.appendChild(poemItem);
                });

                categorySection.appendChild(poemListDiv);
                poemList.appendChild(categorySection);
            });
        }

        // 選擇詞作 - 簡化版本，完全禁用自動韻部選擇


        // 显示韵部选择器 - 优化版，添加了元素存在性检查
        function showRhymeGroupSelector() {
            // 获取所有需要的DOM元素，添加存在性检查
            const rhymeGroupSelector = document.getElementById('rhymeGroupSelector');
            if (!rhymeGroupSelector) {
                console.warn('找不到rhymeGroupSelector元素，停止显示韵部选择器');
                return;
            }
            
            const dropdown = document.getElementById('rhymeGroupDropdown');
            if (!dropdown) {
                console.warn('找不到rhymeGroupDropdown元素，停止显示韵部选择器');
                return;
            }
            
            const rhymeGroupInfo = document.getElementById('rhymeGroupInfo');
            const rhymeGroupName = document.getElementById('rhymeGroupName');
            const rhymeGroupDesc = document.getElementById('rhymeGroupDesc');
            const rhymePingSample = document.getElementById('rhymePingSample');
            const rhymeZeSample = document.getElementById('rhymeZeSample');
            const rhymeStatus = document.getElementById('rhymeStatus');
            const rhymeStatusText = document.getElementById('rhymeStatusText');
            
            // 确保有当前选定的诗词模式
            if (!currentPoem || !currentPoem.pattern) {
                console.warn('没有当前选定的诗词模式，停止显示韵部选择器');
                return;
            }
            
            // 分析词谱中的韵脚类型
            const rhymeTypes = new Set();
            currentPoem.pattern.forEach(line => {
                if (line.rhyme && line.rhyme.length > 0) {
                    line.rhyme.forEach(charIndex => {
                        const tone = line.tones[charIndex];
                        if (tone === '△') rhymeTypes.add('ping');
                        if (tone === '▲') rhymeTypes.add('ze');
                    });
                }
            });
            
            // 清空现有选项，只保留第一个默认选项
            dropdown.innerHTML = '<option value="" disabled selected>請選擇詩詞韻部...</option>';
            
            // 创建韵部选项
            Object.keys(rhymeDatabase).forEach(groupId => {
                const group = rhymeDatabase[groupId];
                
                // 检查该韵部是否有需要的平仄字
                let shouldShow = false;
                if ((rhymeTypes.has('ping') && group.pingChars.length > 0) || 
                    (rhymeTypes.has('ze') && group.zeChars.length > 0)) {
                    shouldShow = true;
                }
                
                if (shouldShow) {
                    const option = document.createElement('option');
                    option.value = groupId;
                    option.textContent = `${group.name} - ${group.description}`;
                    dropdown.appendChild(option);
                }
            });
            
            // 如果已经选择了韵部，预先选中它
            if (userSelectedRhymeGroup && rhymeDatabase[userSelectedRhymeGroup]) {
                dropdown.value = userSelectedRhymeGroup;
                // 触发一次change事件，显示详情
                const event = new Event('change');
                dropdown.dispatchEvent(event);
                // 显示已选择状态
                if (rhymeStatus && rhymeStatusText) {
                    rhymeStatus.style.display = 'flex';
                    rhymeStatusText.textContent = `已選擇「${rhymeDatabase[userSelectedRhymeGroup].name}」韻部`;
                }
            }
            
            // 下拉菜单变化事件
            dropdown.addEventListener('change', function() {
                const selectedGroupId = parseInt(this.value);
                if (selectedGroupId && rhymeDatabase[selectedGroupId]) {
                    const group = rhymeDatabase[selectedGroupId];
                    
                    // 显示选中韵部的详细信息
                    if (rhymeGroupName) rhymeGroupName.textContent = group.name;
                    if (rhymeGroupDesc) rhymeGroupDesc.textContent = group.description;
                    
                    // 显示样本字符
                    if (rhymePingSample) {
                        if (group.pingChars.length > 0) {
                            const samplePing = group.pingChars.slice(0, 5).join('、');
                            rhymePingSample.textContent = samplePing + (group.pingChars.length > 5 ? '...' : '');
                            rhymePingSample.style.display = 'block';
                        } else {
                            rhymePingSample.style.display = 'none';
                        }
                    }
                    
                    if (rhymeZeSample) {
                        if (group.zeChars.length > 0) {
                            const sampleZe = group.zeChars.slice(0, 5).join('、');
                            rhymeZeSample.textContent = sampleZe + (group.zeChars.length > 5 ? '...' : '');
                            rhymeZeSample.style.display = 'block';
                        } else {
                            rhymeZeSample.style.display = 'none';
                        }
                    }
                    
                    // 显示详情区域
                    if (rhymeGroupInfo) rhymeGroupInfo.classList.add('active');
                    
                    // 保存选择的韵部
                    userSelectedRhymeGroup = selectedGroupId;
                    
                    // 直接应用选择的韻部，无需点击确认按钮
                    applyUserSelectedRhymeGroup();
                    
                    // 显示已选择状态
                    if (rhymeStatus && rhymeStatusText) {
                        rhymeStatus.style.display = 'flex';
                        rhymeStatusText.textContent = `已選擇「${group.name}」韻部`;
                    }
                } else {
                    // 隐藏详情区域
                    if (rhymeGroupInfo) rhymeGroupInfo.classList.remove('active');
                    
                    // 清除选择
                    userSelectedRhymeGroup = null;
                    
                    // 隐藏已选择状态
                    if (rhymeStatus) rhymeStatus.style.display = 'none';
                }
            });
            
            // 始终显示韵部选择器
            rhymeGroupSelector.style.display = 'block';
        }
        
        // 应用用户选择的韵部
        function applyUserSelectedRhymeGroup() {
            if (!userSelectedRhymeGroup) return;
            
            // 分析词谱中的韵脚类型
            currentPoem.pattern.forEach(line => {
                if (line.rhyme && line.rhyme.length > 0) {
                    line.rhyme.forEach(charIndex => {
                        const tone = line.tones[charIndex];
                        if (tone === '△') {
                            // 设置平声韵部
                            currentRhymeGroups['△'] = userSelectedRhymeGroup;
                        }
                        if (tone === '▲') {
                            // 设置仄声韵部
                            currentRhymeGroups['▲'] = userSelectedRhymeGroup;
                        }
                    });
                }
            });
            
            // 显示提示
            showFeedback(`已选择「${rhymeDatabase[userSelectedRhymeGroup].name}」作为韵部。`, 'info');
        }

        // 顯示詞作
        function displayPoem(cipaiName, versionKey) {
            if (!currentPoem) return;

            modifiedChars.clear();

            // 隱藏提示信息，顯示詞作 - 添加安全检查
            const promptMessage = document.getElementById('promptMessage');
            const poemDisplay = document.getElementById('poemDisplay');
            const patternSource = document.getElementById('patternSource');
            
            if (promptMessage) promptMessage.style.display = 'none';
            if (poemDisplay) poemDisplay.style.display = 'block';
            if (patternSource) patternSource.style.display = 'block';

            // 設置可編輯的標題 - 添加安全检查
            const poemTitle = document.getElementById('poemTitle');
            if (poemTitle) {
                poemTitle.innerHTML = `
                    <span id="titleDisplay" onclick="editTitle()">${currentTitle || cipaiName}</span>
                `;
            } else {
                console.warn('找不到poemTitle元素');
            }
            
            // 設置可編輯的作者信息 - 簡化版，添加安全检查
            const authorInfo = document.getElementById('authorInfo');
            if (authorInfo) {
                authorInfo.innerHTML = `
                    <div class="author-info-simple">
                        <span id="authorDisplay" onclick="editAuthor()">${currentAuthor || currentPoem.author}</span>
                    </div>
                `;
            } else {
                console.warn('找不到authorInfo元素');
            }

            // 使用內聯圖例 - 隱藏原圖例
            const patternLegend = document.getElementById('patternLegend');
            const patternLegendInline = document.getElementById('patternLegendInline');
            if (patternLegend) patternLegend.style.display = 'none';
            if (patternLegendInline) patternLegendInline.style.display = 'flex';

            // 顯示版本切換器（如果有多個版本） - 添加安全检查
            const versionSwitcher = document.getElementById('versionSwitcher');
            if (!versionSwitcher) {
                console.warn('找不到versionSwitcher元素');
                return; // 如果找不到元素，提前退出
            }
            
            const versions = Object.keys(cipaiPatterns[cipaiName].versions);
            
            if (versions.length > 1) {
                versionSwitcher.innerHTML = '';
                versionSwitcher.style.display = 'flex';
                
                versions.forEach(version => {
                    const author = cipaiPatterns[cipaiName].versions[version].author;
                    const btn = document.createElement('button');
                    btn.className = 'version-btn' + (version === versionKey ? ' active' : '');
                    btn.textContent = author;
                    btn.onclick = () => selectPoem(cipaiName, version);
                    versionSwitcher.appendChild(btn);
                });
            } else {
                versionSwitcher.style.display = 'none';
            }
            
            // 不再显示格律来源
            const patternSourceElem = document.getElementById('patternSource');
            if (patternSourceElem) {
                patternSourceElem.innerHTML = ``;
            }
            
            // 更新韵部选择按钮文本
            updateRhymeButtonText();

            // 渲染詞作內容
            renderPoemWithPattern();
            updateStats();
        }

        // 解锁并显示韵部模态窗口的函数 - 简化版本，作为统一入口点
        function unlockAndShowRhymeModal() {
            console.log("🔓 用户点击了韵部选择按钮");
            // 直接调用显示韵部选择器函数
            displayRhymeModal();
        }
        
        // 简化版韵部选择窗口显示函数 - 统一入口点
        function displayRhymeModal() {
            console.log("📋 显示韵部选择器");
            
            // 1. 获取或创建模态窗口
            let modal = document.getElementById('rhymeModal');
            if (!modal) {
                console.log("🏗️ 创建新的韵部模态窗口");
                
                modal = document.createElement('div');
                modal.id = 'rhymeModal';
                modal.className = 'rhyme-modal';
                
                modal.innerHTML = `
                    <div class="rhyme-modal-content">
                        <div class="rhyme-modal-header">
                            <div class="rhyme-modal-title" id="rhymeModalTitle">選擇詩詞韻部</div>
                            <button id="rhymeModalClose" class="rhyme-modal-close">&times;</button>
                        </div>
                        
                        <div class="rhyme-modal-body">
                            <div class="rhyme-info-panel">
                                <div id="rhymeTypeInfo"></div>
                            </div>
                            
                            <div class="rhyme-cards-container" id="rhymeCardsContainer">
                                <!-- 韵部卡片将由JavaScript生成 -->
                            </div>
                            
                            <div class="rhyme-settings">
                                <label class="rhyme-toggle">
                                    <span class="rhyme-toggle-switch">
                                        <input type="checkbox" id="rhymeHintToggle" checked>
                                        <span class="rhyme-toggle-slider"></span>
                                    </span>
                                    顯示韻腳輔助提示字
                                </label>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
            }
            
            // 重新绑定关闭按钮事件 - 每次显示时都重新绑定
            const closeBtn = document.getElementById('rhymeModalClose');
            if (closeBtn) {
                // 使用直接函数而不是引用，避免作用域问题
                closeBtn.onclick = function() {
                    const modal = document.getElementById('rhymeModal');
                    if (modal) {
                        modal.style.display = 'none';
                    }
                };
            }
            
            // 重新绑定提示开关事件
            const hintToggle = document.getElementById('rhymeHintToggle');
            if (hintToggle) {
                hintToggle.checked = window.showRhymeHints !== false;
                hintToggle.onchange = function() {
                    window.showRhymeHints = this.checked;
                };
            }
            
            // 2. 设置词牌名到标题
            const modalTitle = document.getElementById('rhymeModalTitle');
            if (modalTitle && currentCipai) {
                // 3. 分析词谱中的韵脚类型
                const rhymeTypes = analyzeRhymeTypes();
                
                // 确定韵律类型名称和样式
                let rhymeTypeName = "";
                let rhymeTypeClass = "";
                
                if (rhymeTypes.has('ping') && rhymeTypes.has('ze')) {
                    rhymeTypeName = "換韻";
                    rhymeTypeClass = "huan-badge";
                } else if (rhymeTypes.has('ping')) {
                    rhymeTypeName = "平韻";
                    rhymeTypeClass = "ping-badge";
                } else if (rhymeTypes.has('ze')) {
                    rhymeTypeName = "仄韻";
                    rhymeTypeClass = "ze-badge";
                }
                
                // 构建带样式的标题
                if (rhymeTypeName) {
                    modalTitle.innerHTML = `${currentCipai}：選擇韻部 <span class="rhyme-scheme-badge ${rhymeTypeClass}">${rhymeTypeName}</span>`;
                } else {
                    modalTitle.textContent = `${currentCipai}：選擇韻部`;
                }
                
                console.log("✅ 设置韵部选择器标题：", modalTitle.textContent);
            }
            
            // 4. 更新韵部类型信息面板
            updateRhymeTypeInfo(analyzeRhymeTypes());
            
            // 5. 渲染韵部卡片，根据韵脚类型过滤字符
            renderRhymeCards(analyzeRhymeTypes());
            
            // 6. 显示模态窗口
            modal.style.display = 'flex';
            console.log("✅ 韵部选择器显示完成");
        }
        
        // 分析当前词牌的韵脚类型
        // 分析当前词牌的韵脚类型
        function analyzeRhymeTypes() {
            const rhymeTypes = new Set();
            
            if (currentPoem && currentPoem.pattern) {
                currentPoem.pattern.forEach(line => {
                    if (line.rhyme && line.rhyme.length > 0) {
                        line.rhyme.forEach(charIndex => {
                            const tone = line.tones[charIndex];
                            if (tone === '△') rhymeTypes.add('ping');
                            if (tone === '▲') rhymeTypes.add('ze');
                        });
                    }
                });
            }
            
            return rhymeTypes;
        }
        
        // 更新韵部类型信息面板
        function updateRhymeTypeInfo(rhymeTypes) {
            // 完全移除韻部信息顯示，不再需要這個函數的實際功能
            // 但保留函數本身以防其他地方調用
        }
        
        // 渲染韵部卡片
        function renderRhymeCards(rhymeTypes) {
            const cardsContainer = document.getElementById('rhymeCardsContainer');
            if (!cardsContainer) return;
            
            cardsContainer.innerHTML = '';
            console.log("🧩 开始渲染韵部卡片");
            
            // 确定需要显示的韵类型
            const showPingChars = rhymeTypes.has('ping');
            const showZeChars = rhymeTypes.has('ze');
            
            // 如果没有明确指定，默认两种都显示
            const shouldShowPing = showPingChars || (!showPingChars && !showZeChars);
            const shouldShowZe = showZeChars || (!showPingChars && !showZeChars);
            
            let cardCount = 0;
            
            // 遍历所有韵部
            Object.keys(rhymeDatabase).forEach(groupId => {
                const group = rhymeDatabase[groupId];
                
                // 根据韵部类型过滤
                const hasPingChars = shouldShowPing && group.pingChars.length > 0;
                const hasZeChars = shouldShowZe && group.zeChars.length > 0;
                
                // 只显示有相关字符的韵部
                if (hasPingChars || hasZeChars) {
                    const card = document.createElement('div');
                    card.className = 'rhyme-card';
                    if (userSelectedRhymeGroup == groupId) {
                        card.classList.add('selected');
                    }
                    
                    // 构建卡片内容
                    let cardContent = '';
                    cardContent += `<div class="rhyme-card-name">${group.name}</div>`;
                    cardContent += `<div class="rhyme-card-desc">${group.description}</div>`;
                    cardContent += `<div class="rhyme-card-samples">`;
                    
                    // 显示平声字示例
                    if (hasPingChars) {
                        // 确定平声字显示数量：当只显示平声时多显示几个
                        const pingCharLimit = hasZeChars ? 3 : 6;
                        const pingChars = group.pingChars.slice(0, pingCharLimit).join('、');
                        const pingMore = group.pingChars.length > pingCharLimit ? '...' : '';
                        cardContent += `<span class="rhyme-card-ping">平：${pingChars}${pingMore}</span>`;
                    }
                    
                    // 显示仄声字示例
                    if (hasZeChars) {
                        // 确定仄声字显示数量：当只显示仄声时多显示几个
                        const zeCharLimit = hasPingChars ? 3 : 6;
                        const zeChars = group.zeChars.slice(0, zeCharLimit).join('、');
                        const zeMore = group.zeChars.length > zeCharLimit ? '...' : '';
                        cardContent += `<span class="rhyme-card-ze">仄：${zeChars}${zeMore}</span>`;
                    }
                    
                    cardContent += `</div>`;
                    card.innerHTML = cardContent;
                    
                    // 添加点击事件
                    card.addEventListener('click', () => {
                        // 移除所有卡片的选中状态
                        document.querySelectorAll('.rhyme-card').forEach(c => {
                            c.classList.remove('selected');
                        });
                        
                        // 设置当前卡片为选中状态
                        card.classList.add('selected');
                        
                        // 保存选择的韵部
                        userSelectedRhymeGroup = groupId;
                        
                        // 应用选择的韵部
                        applyUserSelectedRhymeGroup();
                        
                        // 更新韵部按钮文本
                        updateRhymeButtonText();
                        
                        // 关闭模态窗口
                        closeRhymeModal();
                    });
                    
                    cardsContainer.appendChild(card);
                    cardCount++;
                }
            });
            
            console.log(`✅ 渲染了${cardCount}个韵部卡片`);
        }
        
        // 簡化版：編輯作者名功能
        function editAuthor() {
            const authorDisplay = document.getElementById('authorDisplay');
            const currentName = currentAuthor || currentPoem.author;
            
            authorDisplay.innerHTML = `
                <input type="text" class="author-input" value="${currentName}" 
                       placeholder="輸入您的名字" id="authorInput">
            `;
            
            const input = document.getElementById('authorInput');
            input.focus();
            input.select();
            
            const saveAuthor = () => {
                currentAuthor = input.value.trim();
                // 如果輸入的名字與原作者相同或為空，恢復為原作者名稱
                if (!currentAuthor || currentAuthor === currentPoem.author) {
                    currentAuthor = null;
                    authorDisplay.textContent = currentPoem.author;
                } else {
                    authorDisplay.textContent = currentAuthor;
                }
            };
            
            input.addEventListener('blur', saveAuthor);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    saveAuthor();
                }
            });
        }

                // 已廢棄：詞牌上下闕分界點定義 - 現在通過sections屬性直接表示

        // 根據詞譜渲染詞作內容 - 優化詩歌顯示格式
        function renderPoemWithPattern() {
            const poemContent = document.getElementById('poemContent');
            if (!poemContent) {
                console.warn('找不到poemContent元素');
                return;
            }
            
            poemContent.innerHTML = '';

            if (!currentPoem || !currentPoem.pattern) {
                console.warn('沒有可用的詞譜數據');
                return;
            }

            // 獲取分界點（直接從詞牌數據結構中獲取）
            const breakpoint = cipaiPatterns[currentCipai] && cipaiPatterns[currentCipai].breakpoint;
            
            // 判斷詩體類型
            const isJueju = currentCipai.includes('絕句');
            const isLushi = currentCipai.includes('律詩');
            
            // 如果是律詩或絕句，添加詩體結構標記
            if (isJueju || isLushi) {
                if (isJueju && currentPoem.pattern.length === 4) {
                    // 絕句分兩聯：首聯、尾聯
                    renderJueju(poemContent, currentPoem.pattern);
                } else if (isLushi && currentPoem.pattern.length === 8) {
                    // 律詩分四聯：首聯、頷聯、頸聯、尾聯
                    renderLushi(poemContent, currentPoem.pattern);
                } else {
                    // 長度不標準時，使用默認渲染方式
                    renderDefaultPoem(poemContent, currentPoem.pattern, breakpoint);
                }
            } else {
                // 其他詞牌使用默認渲染方式
                renderDefaultPoem(poemContent, currentPoem.pattern, breakpoint);
            }
        }
        
        // 渲染絕句（兩聯結構）
        function renderJueju(container, patternData) {
            // 上聯
            const upperSectionDiv = document.createElement('div');
            upperSectionDiv.className = 'poem-section upper-section';
            upperSectionDiv.textContent = '上聯';
            container.appendChild(upperSectionDiv);
            
            // 上聯兩句
            renderPoemLine(container, patternData[0], 0, '上聯');
            renderPoemLine(container, patternData[1], 1, '上聯');
            
            // 下聯
            const lowerSectionDiv = document.createElement('div');
            lowerSectionDiv.className = 'poem-section lower-section';
            lowerSectionDiv.textContent = '下聯';
            container.appendChild(lowerSectionDiv);
            
            // 下聯兩句
            renderPoemLine(container, patternData[2], 2, '下聯');
            renderPoemLine(container, patternData[3], 3, '下聯');
        }
        
        // 渲染律詩（四聯結構）
        function renderLushi(container, patternData) {
            // 首聯
            const firstSectionDiv = document.createElement('div');
            firstSectionDiv.className = 'poem-section first-section';
            firstSectionDiv.textContent = '首聯';
            container.appendChild(firstSectionDiv);
            
            // 首聯兩句
            renderPoemLine(container, patternData[0], 0, '首聯');
            renderPoemLine(container, patternData[1], 1, '首聯');
            
            // 頷聯
            const secondSectionDiv = document.createElement('div');
            secondSectionDiv.className = 'poem-section second-section';
            secondSectionDiv.textContent = '頷聯';
            container.appendChild(secondSectionDiv);
            
            // 頷聯兩句
            renderPoemLine(container, patternData[2], 2, '頷聯');
            renderPoemLine(container, patternData[3], 3, '頷聯');
            
            // 頸聯
            const thirdSectionDiv = document.createElement('div');
            thirdSectionDiv.className = 'poem-section third-section';
            thirdSectionDiv.textContent = '頸聯';
            container.appendChild(thirdSectionDiv);
            
            // 頸聯兩句
            renderPoemLine(container, patternData[4], 4, '頸聯');
            renderPoemLine(container, patternData[5], 5, '頸聯');
            
            // 尾聯
            const lastSectionDiv = document.createElement('div');
            lastSectionDiv.className = 'poem-section last-section';
            lastSectionDiv.textContent = '尾聯';
            container.appendChild(lastSectionDiv);
            
            // 尾聯兩句
            renderPoemLine(container, patternData[6], 6, '尾聯');
            renderPoemLine(container, patternData[7], 7, '尾聯');
        }
        
        // 渲染詞牌或其他非標準詩體
        function renderDefaultPoem(container, patternData, breakpoint) {
            patternData.forEach((lineData, lineIndex) => {
                // 如果當前行索引等於分界點，添加分隔符
                if (breakpoint !== undefined && lineIndex === breakpoint) {
                    const spacerDiv = document.createElement('div');
                    spacerDiv.className = 'poem-line spacer';
                    spacerDiv.style.height = '30px'; // 空行的高度
                    container.appendChild(spacerDiv);
                    
                    // 添加下闕標記
                    const lowerSectionDiv = document.createElement('div');
                    lowerSectionDiv.className = 'poem-section lower-section';
                    lowerSectionDiv.textContent = '下闕';
                    container.appendChild(lowerSectionDiv);
                }
                
                // 如果是第一行且有分界點，添加上闕標記
                if (lineIndex === 0 && breakpoint !== undefined) {
                    const upperSectionDiv = document.createElement('div');
                    upperSectionDiv.className = 'poem-section upper-section';
                    upperSectionDiv.textContent = '上闕';
                    container.appendChild(upperSectionDiv);
                }
                
                // 渲染詩行
                renderPoemLine(container, lineData, lineIndex, 
                               breakpoint !== undefined ? 
                               (lineIndex < breakpoint ? "上闕" : "下闕") : "");
            });
        }
        
        // 通用詩行渲染函數
        function renderPoemLine(container, lineData, lineIndex, sectionType) {
            if (!lineData.text || !lineData.tones) {
                console.warn(`第${lineIndex+1}行缺少文本或平仄數據`);
                return;
            }
            
            const lineDiv = document.createElement('div');
            lineDiv.className = 'poem-line';
            
            // 設置段落類型
            if (sectionType) {
                lineDiv.dataset.section = sectionType;
            }
            
            const chars = lineData.text.split('');
            const tones = lineData.tones.split('');
            
            chars.forEach((char, charIndex) => {
                const span = document.createElement('span');
                span.className = 'char-span';
                span.textContent = char;
                span.dataset.lineIndex = lineIndex;
                span.dataset.charIndex = charIndex;
                
                // 設置平仄樣式
                if (charIndex < tones.length) {
                    const tone = tones[charIndex];
                    if (tone === '○') {
                        span.classList.add('ping-char');
                    } else if (tone === '●') {
                        span.classList.add('ze-char');
                    } else if (tone === '⊙') {
                        span.classList.add('flexible-char');
                    } else if (tone === '△') {
                        span.classList.add('rhyme-ping');
                    } else if (tone === '▲') {
                        span.classList.add('rhyme-ze');
                    }

                    // 檢查是否是韻腳位置
                    const isRhyme = lineData.rhyme && lineData.rhyme.includes(charIndex);
                    if (isRhyme) {
                        span.classList.add('rhyme-position'); // 添加韵脚动画效果
                    }
                    
                    span.onclick = () => editCharWithPattern(span, char, tone, isRhyme, lineIndex, charIndex);
                } else {
                    console.warn(`第${lineIndex+1}行字符${charIndex+1}缺少平仄標記`);
                }
                
                lineDiv.appendChild(span);
            });
            
            container.appendChild(lineDiv);
        }

        // 根據格律編輯字符
        async function editCharWithPattern(span, originalChar, expectedTone, isRhyme, lineIndex, charIndex) {
            if (span.classList.contains('editing')) return;

            // 无论是什么字符，都先进入编辑模式
            span.classList.add('editing');
            const input = document.createElement('input');
            input.className = 'char-input';
            input.type = 'text';
            input.maxLength = 1;
            input.value = span.textContent;
            
            span.innerHTML = '';
            span.appendChild(input);
            input.focus();
            input.select();
            
            // 如果是韻腳位置且已經確定了韻組，同时显示韻字選擇器
            if (isRhyme && currentRhymeGroups[expectedTone]) {
                // 延迟一点点显示选择器，确保输入框已经完全显示
                setTimeout(() => {
                    showRhymeSelector(span, originalChar, expectedTone, true); // 传入true表示用户正在编辑
                }, 10);
            }

            const finishEdit = async () => {
                const newChar = input.value.trim() || originalChar;
                span.classList.remove('editing');
                span.innerHTML = newChar;
                
                // 检查平仄是否正确 (使用新的API)
                const isMatchingTone = await checkToneMatch(newChar, expectedTone);
                
                if (!isMatchingTone) {
                    // 添加視覺提示
                    span.classList.add('tone-mismatch');
                    
                    // 根據平仄類型顯示適當的提示信息
                    let toneType = '';
                    if (expectedTone === '○' || expectedTone === '△') {
                        toneType = '平聲(陰平/陽平)';
                    } else if (expectedTone === '●' || expectedTone === '▲') {
                        toneType = '仄聲(上聲/去聲)';
                    }
                    
                    showFeedback(`提示：「${newChar}」可能不符合${toneType}要求。`, 'warning');
                } else {
                    // 移除任何錯誤標記
                    span.classList.remove('tone-mismatch');
                }
                
                // 如果是韻腳位置且是第一次填寫，設定韻組並顯示更明確的提示
                if (isRhyme && !currentRhymeGroups[expectedTone]) {
                    const rhymeGroup = findRhymeGroup(newChar);
                    if (rhymeGroup) {
                        currentRhymeGroups[expectedTone] = rhymeGroup;
                        const rhymeTypeName = expectedTone === '△' ? '平韻' : '仄韻';
                        const message = `您已選擇「${newChar}」字作為${rhymeTypeName}，屬於「${rhymeDatabase[rhymeGroup].name}」韻部。後續韻腳將推薦同韻字。`;
                        showFeedback(message, 'info');
                        
                        // 更新所有同类韵脚的提示
                        updateRhymePositionsHighlight(expectedTone);
                    }
                }
                
                // 檢查韻腳是否正確
                if (isRhyme && currentRhymeGroups[expectedTone]) {
                    const rhymeGroup = findRhymeGroup(newChar);
                    if (rhymeGroup && rhymeGroup !== currentRhymeGroups[expectedTone]) {
                        showFeedback(`提示：「${newChar}」不屬於您選擇的${rhymeDatabase[currentRhymeGroups[expectedTone]].name}韻部`, 'warning');
                    }
                }
                
                if (newChar !== originalChar) {
                    span.classList.add('modified');
                    modifiedChars.add(span);
                } else {
                    span.classList.remove('modified');
                    modifiedChars.delete(span);
                }
                
                updateStats();
            };

            input.addEventListener('blur', finishEdit);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    finishEdit();
                }
                if (e.key === 'Escape') {
                    span.classList.remove('editing');
                    span.innerHTML = originalChar;
                }
            });
        }

        // 更新所有同类韵脚位置的高亮效果
        function updateRhymePositionsHighlight(rhymeType) {
            // 移除所有同类韵脚位置的动画效果
            document.querySelectorAll('.rhyme-position').forEach(el => {
                if (el.classList.contains(rhymeType === '△' ? 'rhyme-ping' : 'rhyme-ze')) {
                    // 移除动画效果
                    el.classList.remove('rhyme-position');
                    // 添加已定义韵部的标记
                    el.classList.add('defined-rhyme');
                }
            });
        }
        
        // 載入拼音轉換庫 pinyin-pro
        function loadPinyinAPI() {
            return new Promise((resolve) => {
                if (window.pinyinPro) {
                    resolve(true);
                    return;
                }
                
                const script = document.createElement('script');
                script.src = "https://cdn.jsdelivr.net/npm/pinyin-pro@3.13.2/dist/index.js";
                script.async = true;
                
                script.onload = () => resolve(true);
                script.onerror = () => resolve(false);
                
                document.head.appendChild(script);
            });
        }

        // 判斷漢字聲調
        async function getCharTone(char) {
            // 確保API已加載
            const isLoaded = await loadPinyinAPI();
            if (!isLoaded || !window.pinyinPro) {
                console.warn('拼音API載入失敗');
                return 0; // 無法判斷
            }
            
            try {
                // 獲取帶數字聲調的拼音
                const pinyinWithTone = window.pinyinPro.pinyin(char, { 
                    toneType: 'num',  // 使用數字標記聲調
                    type: 'array'     // 返回數組格式
                });
                
                // 從拼音中提取聲調數字
                if (pinyinWithTone && pinyinWithTone.length > 0) {
                    const match = pinyinWithTone[0].match(/[1-4]$/);
                    if (match) {
                        return parseInt(match[0]);
                    }
                }
            } catch (e) {
                console.warn('拼音轉換錯誤:', e);
            }
            
            return 0; // 預設返回0表示無法判斷
        }

        // 判斷是否為平聲
        async function isPingSheng(char) {
            const tone = await getCharTone(char);
            if (tone === 0) return null; // 無法判斷
            return (tone === 1 || tone === 2); // 1、2聲為平聲
        }

        // 檢查平仄是否匹配
        async function checkToneMatch(char, expectedTone) {
            const isPing = await isPingSheng(char);
            
            // 無法判斷時默認視為符合要求
            if (isPing === null) return true;
            
            if (expectedTone === '○' || expectedTone === '△') {
                return isPing === true;
            } else if (expectedTone === '●' || expectedTone === '▲') {
                return isPing === false;
            } else if (expectedTone === '⊙') {
                // 可平可仄位置，任何字都符合
                return true;
            }
            
            return true;
        }

        // 獲取平仄描述
        function getToneDescription(tone) {
            switch(tone) {
                case '○': return '平聲字';
                case '●': return '仄聲字';
                case '△': return '平韻字';
                case '▲': return '仄韻字';
                case '⊙': return '可平可仄';
                default: return '合適的字';
            }
        }

        // 顯示韻字選擇器 - 優先顯示在輸入框下方，模仿下拉選單
        function showRhymeSelector(span, originalChar, rhymeType, isEditMode = false) {
            // 如果已經有選擇器，先移除
            closeRhymeSelector();
            
            const rhymeGroup = currentRhymeGroups[rhymeType];
            const rhymeData = rhymeDatabase[rhymeGroup];
            const rhymeTypeName = rhymeType === '△' ? '平韻' : '仄韻';
            
            // 获取字符或输入框的精确位置信息
            const spanRect = span.getBoundingClientRect();
            
            // 创建选择器面板，先设置为隐藏状态
            const selector = document.createElement('div');
            selector.className = 'floating-rhyme-selector';
            selector.style.position = 'fixed';  // 使用fixed相对于视窗定位
            selector.style.visibility = 'hidden'; // 先隐藏，避免闪烁
            selector.dataset.forCharId = span.dataset.charId || Date.now();
            
            if (!span.dataset.charId) {
                span.dataset.charId = selector.dataset.forCharId;
            }
            
            // 获取字符或输入框的关键位置
            const charBottom = spanRect.bottom;
            const charTop = spanRect.top;
            const charLeft = spanRect.left;
            const charWidth = spanRect.width;
            const charCenterX = charLeft + (charWidth / 2);
            
            // 根据平仄选择合适的字符集
            let chars;
            if (rhymeType === '△') {
                chars = rhymeData.pingChars;
            } else if (rhymeType === '▲') {
                chars = rhymeData.zeChars;
            } else {
                chars = [...rhymeData.pingChars, ...rhymeData.zeChars];
            }
            
            // 计算分页参数
            const CHARS_PER_PAGE = 20; // 每页显示5×4=20个字符
            const totalPages = Math.ceil(chars.length / CHARS_PER_PAGE);
            let currentPage = 1;
            
            // 添加内容 - 增加分页控制
            selector.innerHTML = `
                <div class="floating-rhyme-title">選擇${rhymeTypeName}「${originalChar}」的替換字 - ${rhymeData.name}</div>
                <div class="floating-rhyme-grid" id="floatingRhymeGrid"></div>
                <div class="rhyme-selector-controls">
                    <button class="rhyme-nav-button prev-button" id="prevPageBtn" ${currentPage <= 1 ? 'disabled' : ''}>&laquo;</button>
                    <div class="rhyme-page-indicator" id="pageIndicator">
                        ${Array(totalPages).fill(0).map((_, i) => 
                            `<div class="rhyme-page-dot ${i+1 === currentPage ? 'active' : ''}" data-page="${i+1}"></div>`
                        ).join('')}
                    </div>
                    <button class="rhyme-nav-button next-button" id="nextPageBtn" ${currentPage >= totalPages ? 'disabled' : ''}>&raquo;</button>
                </div>
            `;
            
            // 创建半透明遮罩层
            const overlay = document.createElement('div');
            overlay.className = 'rhyme-overlay';
            document.body.appendChild(overlay);
            
            // 先添加到DOM以获取尺寸
            document.body.appendChild(selector);
            
            // 填充当前页的韻字网格
            function renderCurrentPage() {
                const grid = selector.querySelector('#floatingRhymeGrid');
                grid.innerHTML = ''; // 清空当前内容
                
                const startIdx = (currentPage - 1) * CHARS_PER_PAGE;
                const endIdx = Math.min(startIdx + CHARS_PER_PAGE, chars.length);
                const currentPageChars = chars.slice(startIdx, endIdx);
                
                // 显示当前页的字符
                currentPageChars.forEach(char => {
                    const btn = document.createElement('button');
                    btn.className = 'floating-rhyme-char';
                    btn.textContent = char;
                    btn.dataset.char = char;
                    btn.onclick = (e) => {
                        e.stopPropagation();
                        selectRhymeChar(span, char, originalChar);
                    };
                    grid.appendChild(btn);
                });
                
                // 更新分页控制
                const prevBtn = selector.querySelector('#prevPageBtn');
                const nextBtn = selector.querySelector('#nextPageBtn');
                prevBtn.disabled = currentPage <= 1;
                nextBtn.disabled = currentPage >= totalPages;
                
                // 更新页面指示器
                const dots = selector.querySelectorAll('.rhyme-page-dot');
                dots.forEach(dot => {
                    const page = parseInt(dot.dataset.page);
                    if (page === currentPage) {
                        dot.classList.add('active');
                    } else {
                        dot.classList.remove('active');
                    }
                });
            }
            
            // 初始渲染第一页
            renderCurrentPage();
            
            // 添加分页控制事件
            const prevBtn = selector.querySelector('#prevPageBtn');
            const nextBtn = selector.querySelector('#nextPageBtn');
            
            prevBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (currentPage > 1) {
                    currentPage--;
                    renderCurrentPage();
                }
            });
            
            nextBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (currentPage < totalPages) {
                    currentPage++;
                    renderCurrentPage();
                }
            });
            
            // 页面指示器点击事件
            const pageIndicator = selector.querySelector('#pageIndicator');
            pageIndicator.addEventListener('click', (e) => {
                e.stopPropagation();
                if (e.target.classList.contains('rhyme-page-dot')) {
                    const page = parseInt(e.target.dataset.page);
                    if (page !== currentPage) {
                        currentPage = page;
                        renderCurrentPage();
                    }
                }
            });
            
            // 现在获取准确的选择器尺寸
            const selectorWidth = selector.offsetWidth;
            const selectorHeight = selector.offsetHeight;
            
            // 获取视窗尺寸
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            
            // 设置安全距离
            const safeDistance = 10; // 输入框下方只需要小距离即可
            
            // 定位策略：优先放在输入框正下方（像下拉菜单一样）
            let selectorTop;
            let selectorLeft;
            
            // 检查下方空间是否足够
            if (viewportHeight - charBottom > selectorHeight + safeDistance) {
                // 优先选择：放在字符/输入框正下方
                selectorTop = charBottom + safeDistance;
            } 
            // 如果下方空间不足，则放在上方
            else if (charTop > selectorHeight + safeDistance) {
                // 放在字符上方
                selectorTop = charTop - selectorHeight - safeDistance;
            } 
            // 最后选择：空间不足时尽量放在合适位置
            else {
                // 如果上下都不够，优先放在页面中央位置
                selectorTop = Math.max(10, (viewportHeight - selectorHeight) / 2);
            }
            
            // 水平对齐：优先与字符左对齐（像下拉菜单），确保能完全显示
            selectorLeft = charLeft;
            
            // 确保选择器不会超出右边界
            if (selectorLeft + selectorWidth > viewportWidth - 10) {
                // 如果超出右边界，尝试右对齐
                selectorLeft = charLeft + charWidth - selectorWidth;
                
                // 如果还是不行，就居中对齐
                if (selectorLeft < 10) {
                    selectorLeft = charCenterX - (selectorWidth / 2);
                    
                    // 最后确保不会超出左右边界
                    selectorLeft = Math.max(10, Math.min(viewportWidth - selectorWidth - 10, selectorLeft));
                }
            }
            
            // 最终应用选择器位置
            selector.style.left = `${selectorLeft}px`;
            selector.style.top = `${selectorTop}px`;
            selector.style.visibility = 'visible'; // 现在可以显示了
            
            // 添加小箭头指示（如果是下拉模式）
            if (viewportHeight - charBottom > selectorHeight + safeDistance) {
                selector.style.borderTopLeftRadius = '0';
                selector.style.borderTopRightRadius = '0';
                // 可以在这里添加一个小箭头元素指向输入框
            }
            
            // 高亮显示当前正在编辑的字符
            if (!isEditMode) { // 如果不是编辑模式，才添加高亮
                span.classList.add('actively-editing');
            }
            
            // 阻止选择器内部点击事件冒泡
            selector.addEventListener('click', (e) => {
                e.stopPropagation();
            });
            
            // 保存引用以便关闭时使用
            window.currentRhymeSelector = selector;
            window.currentRhymeOverlay = overlay;
            
            // 點擊文檔其他地方時關閉選擇器
            setTimeout(() => {
                document.addEventListener('click', closeRhymeSelectorOnClickOutside);
            }, 10);
        }
        
        // 點擊外部時關閉韻字選擇器
        function closeRhymeSelectorOnClickOutside(e) {
            const selector = window.currentRhymeSelector;
            if (selector && !selector.contains(e.target) && !e.target.classList.contains('char-span')) {
                closeRhymeSelector();
                document.removeEventListener('click', closeRhymeSelectorOnClickOutside);
            }
        }

        // 選擇韻字
        function selectRhymeChar(span, char, originalChar) {
            span.innerHTML = char;
            
            if (char !== originalChar) {
                span.classList.add('modified');
                modifiedChars.add(span);
            } else {
                span.classList.remove('modified');
                modifiedChars.delete(span);
            }
            
            updateStats();
            // 选择字符后自动关闭选择器窗口
            closeRhymeSelector();
        }

        // 關閉韻字選擇器
        function closeRhymeSelector() {
            if (window.currentRhymeSelector) {
                document.body.removeChild(window.currentRhymeSelector);
                window.currentRhymeSelector = null;
            }
            if (window.currentRhymeOverlay) {
                document.body.removeChild(window.currentRhymeOverlay);
                window.currentRhymeOverlay = null;
            }
            
            // 移除正在编辑的字符高亮
            document.querySelectorAll('.actively-editing').forEach(el => {
                el.classList.remove('actively-editing');
            });
            
            // 清除事件监听器
            document.removeEventListener('click', closeRhymeSelectorOnClickOutside);
        }

        // 查找字符属于哪个韵部
        function findRhymeGroup(char) {
            for (let groupId in rhymeDatabase) {
                const group = rhymeDatabase[groupId];
                if (group.pingChars.includes(char) || group.zeChars.includes(char)) {
                    return parseInt(groupId);
                }
            }
            return null;
        }

        // 更新統計信息
        function updateStats() {
            const totalChars = document.querySelectorAll('.char-span').length;
            const modifiedCount = modifiedChars.size;
            const modifyRate = totalChars > 0 ? Math.round((modifiedCount / totalChars) * 100) : 0;

            document.getElementById('modifiedCount').textContent = modifiedCount;
            document.getElementById('totalCount').textContent = totalChars;
            document.getElementById('modifyRate').textContent = modifyRate + '%';
        }

        // 重置詞作
        function resetPoem() {
            if (!currentPoem) return;

            document.querySelectorAll('.char-span').forEach(span => {
                span.classList.remove('modified', 'editing');
            });
            
            modifiedChars.clear();
            currentRhymeGroups = {};
            renderPoemWithPattern();
            showFeedback('已恢復為原作', 'info');
        }

        // 複製文本到剪貼板
        function copyTextToClipboard() {
            if (!currentPoem) return;

            const modifiedCount = modifiedChars.size;
            
            // 即使没有修改，也允许复制原文
            // if (modifiedCount === 0) {
            //     showFeedback('您還沒有進行任何修改', 'info');
            //     return;
            // }

            const modifiedContent = getModifiedContent();
            const authorText = currentAuthor || currentPoem.author;
            const textToCopy = `${currentCipai}\n${authorText}\n${modifiedContent}`;
            
            // 使用Clipboard API複製文本
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    showFeedback(`文本已複製到剪貼板！`, 'success');
                })
                .catch(err => {
                    showFeedback(`複製失敗: ${err}`, 'warning');
                    console.error('複製失敗:', err);
                });
        }
        
        // 保留兼容性
        function saveCreation() {
            copyTextToClipboard();
        }

        // 海報生成器相關功能
        // 打開海報生成窗口
        function openPosterGenerator() {
            const posterModal = document.getElementById('posterModal');
            if (posterModal) {
                posterModal.style.display = 'flex';
                
                // 關閉按鈕事件
                document.getElementById('posterModalClose').onclick = function() {
                    posterModal.style.display = 'none';
                };
                
                // 初始化設置和事件
                initPosterGenerator();
            } else {
                console.error('找不到海報生成器模態窗口');
            }
        }
        
        // 初始化海報生成器
        function initPosterGenerator() {
            // 默认选择宣纸风格并生成壁纸
            document.querySelectorAll('.style-button').forEach(button => {
                button.addEventListener('click', function() {
                    // 移除其他按钮的活跃状态
                    document.querySelectorAll('.style-button').forEach(b => b.classList.remove('active'));
                    // 添加当前按钮的活跃状态
                    this.classList.add('active');
                    // 获取风格
                    const style = this.dataset.style;
                    // 生成壁纸
                    generatePosterFromStyle(style);
                });
            });
            
            // 默认选择宣纸风格并生成壁纸
            generatePosterFromStyle('xuan');
            
            // 下載按鈕事件
            document.getElementById('downloadPosterBtn').onclick = downloadPoster;
            
            // 關閉按鈕點擊外部區域時關閉窗口
            document.getElementById('posterModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    this.style.display = 'none';
                }
            });
            
            // 清除以前的圖像
            document.getElementById('posterCanvas').style.display = 'none';
            document.getElementById('posterPlaceholder').style.display = 'flex';
            document.getElementById('downloadPosterBtn').disabled = true;
        }
        
        // 自动生成海报 (从风格卡片直接生成)
        function generatePosterFromStyle(style) {
            if (!currentPoem) {
                alert('請先選擇一首詞作');
                return;
            }
            
            // 显示预览区域
            document.getElementById('posterPreviewSection').style.display = 'block';
            
            // 顯示加載中
            const loadingEl = document.getElementById('posterLoading');
            loadingEl.style.display = 'flex';
            
            // 设置样式
            const settings = {
                posterStyle: style,
                decorStyle: 'simple', // 默认简约风格
                fontStyle: 'kai', // 默认楷体
                showCipaiTitle: true,
                showAuthor: true,
                textureStrength: 0.5,
                posterSize: '9:16', // 默认手机壁纸比例
                
                // 詞作數據
                cipaiName: currentCipai,
                author: currentAuthor || currentPoem.author,
                content: getModifiedContent().split('\n')
            };
            
            // 異步生成海報
            setTimeout(() => {
                try {
                    // 創建和配置畫布
                    const canvas = setupCanvas(settings);
                    
                    // 繪製背景
                    drawBackground(canvas, settings);
                    
                    // 繪製詞作內容
                    drawPoem(canvas, settings);
                    
                    // 顯示海報
                    const canvasEl = document.getElementById('posterCanvas');
                    canvasEl.style.display = 'block';
                    
                    // 啟用下載按鈕
                    document.getElementById('downloadPosterBtn').disabled = false;
                } catch (error) {
                    console.error('生成海報時出錯:', error);
                    alert('生成海報時出錯: ' + error.message);
                } finally {
                    // 隱藏加載中
                    loadingEl.style.display = 'none';
                }
            }, 500); // 延遲執行以顯示加載動畫
        }
        
        // 獲取海報設置
        function getPosterSettings() {
            const settings = {
                posterStyle: document.getElementById('posterStyle').value,
                decorStyle: document.getElementById('decorStyle').value,
                fontStyle: document.getElementById('fontStyle').value,
                showCipaiTitle: document.getElementById('showCipaiTitle').checked,
                showAuthor: document.getElementById('showAuthor').checked,
                textureStrength: parseInt(document.getElementById('textureStrength').value) / 100,
                posterSize: document.getElementById('posterSize').value,
                
                // 詞作數據
                cipaiName: currentCipai,
                author: currentAuthor || currentPoem.author,
                content: getModifiedContent().split('\n'),
                
                // 設計參數
                fontSize: 0, // 將根據畫布大小計算
                lineHeight: 0,
                marginTop: 0,
                marginRight: 0,
                titleSize: 0,
                authorSize: 0
            };
            
            return settings;
        }
        
        // 設置畫布
        function setupCanvas(settings) {
            const canvas = document.getElementById('posterCanvas');
            const ctx = canvas.getContext('2d');
            
            // 設置畫布尺寸
            let width, height;
            const baseSize = 1200; // 基礎尺寸
            
            switch (settings.posterSize) {
                case '16:9':
                    width = baseSize;
                    height = Math.round(baseSize * (9/16));
                    break;
                case '9:16':
                    width = Math.round(baseSize * (9/16));
                    height = baseSize;
                    break;
                case '1:1':
                    width = baseSize;
                    height = baseSize;
                    break;
                case '4:3':
                    width = baseSize;
                    height = Math.round(baseSize * (3/4));
                    break;
                default:
                    width = Math.round(baseSize * (9/16));
                    height = baseSize;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // 計算字體大小和間距
            settings.fontSize = Math.round(width * 0.055); // 基礎字體大小
            settings.lineHeight = Math.round(settings.fontSize * 1.7); // 行高
            settings.marginTop = Math.round(height * 0.12); // 頂部邊距
            settings.marginRight = Math.round(width * 0.15); // 右側邊距（豎排從右向左）
            settings.titleSize = Math.round(settings.fontSize * 1.5); // 標題字體大小
            settings.authorSize = Math.round(settings.fontSize * 0.8); // 作者字體大小
            
            return {canvas, ctx, width, height, settings};
        }
        
        // 繪製背景
        function drawBackground({canvas, ctx, width, height, settings}) {
            // 清除畫布
            ctx.clearRect(0, 0, width, height);
            
            // 背景色和紋理
            let bgColor, textColor, borderColor;
            
            switch (settings.posterStyle) {
                case 'xuan': // 宣紙風格
                    bgColor = '#f9f2dc';
                    textColor = '#333333';
                    borderColor = '#d9b27c';
                    break;
                case 'mo': // 墨韻風格
                    bgColor = '#1c1c1c';
                    textColor = '#e8e8e8';
                    borderColor = '#555555';
                    break;
                case 'qinghua': // 青花風格
                    bgColor = '#e8f2f7';
                    textColor = '#245a7a';
                    borderColor = '#6b93ad';
                    break;
                case 'danqing': // 丹心風格
                    bgColor = '#fff2f2';
                    textColor = '#8a292d';
                    borderColor = '#c24e54';
                    break;
                case 'songyan': // 松煙風格
                    bgColor = '#e6efe0';
                    textColor = '#1c4024';
                    borderColor = '#587f5e';
                    break;
                case 'zhujian': // 竹簡風格
                    bgColor = '#e0d4b8';
                    textColor = '#5c3c10';
                    borderColor = '#9b7d56';
                    break;
                default:
                    bgColor = '#f9f2dc';
                    textColor = '#333333';
                    borderColor = '#d9b27c';
            }
            
            // 設置背景色
            ctx.fillStyle = bgColor;
            ctx.fillRect(0, 0, width, height);
            
            // 添加背景紋理
            if (settings.textureStrength > 0) {
                addBackgroundTexture(ctx, width, height, settings.textureStrength, settings.posterStyle);
            }
            
            // 添加裝飾風格
            addDecoration(ctx, width, height, settings);
            
            // 添加雙線邊框
            const borderWidth = Math.round(width * 0.02);
            const innerBorderWidth = Math.round(width * 0.01);
            const borderGap = Math.round(width * 0.01);
            
            // 繪製外邊框
            ctx.strokeStyle = borderColor;
            ctx.lineWidth = borderWidth;
            ctx.strokeRect(borderWidth/2, borderWidth/2, width - borderWidth, height - borderWidth);
            
            // 繪製內邊框
            ctx.lineWidth = innerBorderWidth;
            ctx.strokeRect(borderWidth + borderGap + innerBorderWidth/2, 
                          borderWidth + borderGap + innerBorderWidth/2, 
                          width - 2*(borderWidth + borderGap + innerBorderWidth/2), 
                          height - 2*(borderWidth + borderGap + innerBorderWidth/2));
            
            // 返回顏色配置
            return {textColor, bgColor, borderColor};
        }
        
        // 添加背景紋理
        function addBackgroundTexture(ctx, width, height, strength, style) {
            ctx.save();
            
            // 設置透明度
            ctx.globalAlpha = strength * 0.3;
            
            // 紙質紋理
            for (let i = 0; i < width * height / 300; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const radius = Math.random() * 1.5 + 0.5;
                
                ctx.beginPath();
                ctx.arc(x, y, radius, 0, Math.PI * 2);
                
                // 根據風格設置紋理顏色
                if (style === 'mo') { // 墨韻風格
                    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.03 + 0.01})`;
                } else if (style === 'qinghua') { // 青花風格
                    ctx.fillStyle = `rgba(36, 90, 122, ${Math.random() * 0.03 + 0.01})`;
                } else if (style === 'danqing') { // 丹青風格
                    ctx.fillStyle = `rgba(138, 41, 45, ${Math.random() * 0.03 + 0.01})`;
                } else if (style === 'songyan') { // 松煙風格
                    ctx.fillStyle = `rgba(28, 64, 36, ${Math.random() * 0.03 + 0.01})`;
                } else { // 宣紙風格
                    ctx.fillStyle = `rgba(0, 0, 0, ${Math.random() * 0.03 + 0.01})`;
                }
                
                ctx.fill();
            }
            
            // 線條紋理
            ctx.globalAlpha = strength * 0.05;
            
            for (let i = 0; i < 20; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const length = Math.random() * 100 + 50;
                const angle = Math.random() * Math.PI;
                
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(angle) * length, y + Math.sin(angle) * length);
                
                // 根據風格設置線條顏色
                if (style === 'mo') { // 墨韻風格
                    ctx.strokeStyle = `rgba(255, 255, 255, ${Math.random() * 0.1 + 0.05})`;
                } else if (style === 'qinghua') { // 青花風格
                    ctx.strokeStyle = `rgba(36, 90, 122, ${Math.random() * 0.1 + 0.05})`;
                } else if (style === 'danqing') { // 丹青風格
                    ctx.strokeStyle = `rgba(138, 41, 45, ${Math.random() * 0.1 + 0.05})`;
                } else if (style === 'songyan') { // 松煙風格
                    ctx.strokeStyle = `rgba(28, 64, 36, ${Math.random() * 0.1 + 0.05})`;
                } else { // 宣紙風格
                    ctx.strokeStyle = `rgba(0, 0, 0, ${Math.random() * 0.1 + 0.05})`;
                }
                
                ctx.lineWidth = Math.random() * 0.5 + 0.5;
                ctx.stroke();
            }
            
            ctx.restore();
        }
        
        // 添加裝飾風格
        function addDecoration(ctx, width, height, settings) {
            const style = settings.decorStyle;
            
            if (style === 'simple') {
                // 簡約風格不添加額外裝飾
                return;
            }
            
            ctx.save();
            
            if (style === 'seal') {
                // 印章風格
                drawSeal(ctx, width, height, settings);
            } else if (style === 'ink') {
                // 水墨風格
                drawInkDecoration(ctx, width, height, settings);
            } else if (style === 'scroll') {
                // 古籍風格
                drawScrollDecoration(ctx, width, height, settings);
            }
            
            ctx.restore();
        }
        
        // 繪製印章
        function drawSeal(ctx, width, height, settings) {
            // 獲取顏色
            let sealColor;
            
            switch (settings.posterStyle) {
                case 'mo': // 墨韻風格
                    sealColor = 'rgba(240, 40, 40, 0.7)';
                    break;
                default:
                    sealColor = 'rgba(220, 20, 20, 0.7)';
            }
            
            // 計算印章大小和位置
            const sealSize = Math.min(width, height) * 0.2;
            const x = width * 0.8;
            const y = height * 0.8;
            
            // 繪製印章
            ctx.globalAlpha = 0.7;
            ctx.fillStyle = sealColor;
            
            ctx.beginPath();
            ctx.arc(x, y, sealSize, 0, Math.PI * 2);
            ctx.fill();
            
            // 繪製印章紋理
            ctx.globalAlpha = 0.9;
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 2;
            
            // 內部方形
            ctx.beginPath();
            ctx.rect(x - sealSize * 0.7, y - sealSize * 0.7, sealSize * 1.4, sealSize * 1.4);
            ctx.stroke();
            
            // 內部線條
            const lines = 3;
            for (let i = 0; i < lines; i++) {
                const angle = Math.PI * 2 * i / lines;
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(angle) * sealSize * 0.9, y + Math.sin(angle) * sealSize * 0.9);
                ctx.stroke();
            }
            
            ctx.globalAlpha = 1.0;
        }
        
        // 繪製水墨裝飾
        function drawInkDecoration(ctx, width, height, settings) {
            // 獲取顏色
            let inkColor;
            
            switch (settings.posterStyle) {
                case 'mo': // 墨韻風格
                    inkColor = 'rgba(255, 255, 255, 0.08)';
                    break;
                case 'qinghua': // 青花風格
                    inkColor = 'rgba(36, 90, 122, 0.1)';
                    break;
                case 'danqing': // 丹青風格
                    inkColor = 'rgba(138, 41, 45, 0.1)';
                    break;
                case 'songyan': // 松煙風格
                    inkColor = 'rgba(28, 64, 36, 0.1)';
                    break;
                default:
                    inkColor = 'rgba(0, 0, 0, 0.07)';
            }
            
            // 繪製墨跡
            ctx.globalAlpha = 0.2;
            ctx.fillStyle = inkColor;
            
            // 上方裝飾
            const topSize = width * 0.3;
            ctx.beginPath();
            ctx.moveTo(width * 0.5, 0);
            ctx.bezierCurveTo(
                width * 0.3, height * 0.05,
                width * 0.2, height * 0.02,
                width * 0.1, height * 0.1
            );
            ctx.bezierCurveTo(
                width * 0.15, height * 0.15,
                width * 0.4, height * 0.12,
                width * 0.5, height * 0.08
            );
            ctx.bezierCurveTo(
                width * 0.6, height * 0.12,
                width * 0.85, height * 0.15,
                width * 0.9, height * 0.1
            );
            ctx.bezierCurveTo(
                width * 0.8, height * 0.02,
                width * 0.7, height * 0.05,
                width * 0.5, 0
            );
            ctx.fill();
            
            // 下方裝飾
            ctx.beginPath();
            ctx.moveTo(width * 0.5, height);
            ctx.bezierCurveTo(
                width * 0.3, height * 0.95,
                width * 0.2, height * 0.98,
                width * 0.1, height * 0.9
            );
            ctx.bezierCurveTo(
                width * 0.15, height * 0.85,
                width * 0.4, height * 0.88,
                width * 0.5, height * 0.92
            );
            ctx.bezierCurveTo(
                width * 0.6, height * 0.88,
                width * 0.85, height * 0.85,
                width * 0.9, height * 0.9
            );
            ctx.bezierCurveTo(
                width * 0.8, height * 0.98,
                width * 0.7, height * 0.95,
                width * 0.5, height
            );
            ctx.fill();
            
            ctx.globalAlpha = 1.0;
        }
        
        // 繪製古籍裝飾
        function drawScrollDecoration(ctx, width, height, settings) {
            // 獲取顏色
            let lineColor;
            
            switch (settings.posterStyle) {
                case 'mo': // 墨韻風格
                    lineColor = 'rgba(255, 255, 255, 0.2)';
                    break;
                case 'qinghua': // 青花風格
                    lineColor = 'rgba(36, 90, 122, 0.2)';
                    break;
                case 'danqing': // 丹青風格
                    lineColor = 'rgba(138, 41, 45, 0.2)';
                    break;
                case 'songyan': // 松煙風格
                    lineColor = 'rgba(28, 64, 36, 0.2)';
                    break;
                default:
                    lineColor = 'rgba(0, 0, 0, 0.15)';
            }
            
            // 繪製線條
            ctx.strokeStyle = lineColor;
            ctx.lineWidth = 1;
            
            // 繪製豎線
            const numLines = Math.floor(width / 30);
            const lineSpacing = width / (numLines + 1);
            
            for (let i = 1; i <= numLines; i++) {
                const x = i * lineSpacing;
                ctx.beginPath();
                ctx.moveTo(x, height * 0.05);
                ctx.lineTo(x, height * 0.95);
                ctx.stroke();
            }
            
            // 繪製橫線
            ctx.beginPath();
            ctx.moveTo(width * 0.05, height * 0.05);
            ctx.lineTo(width * 0.95, height * 0.05);
            ctx.stroke();
            
            ctx.beginPath();
            ctx.moveTo(width * 0.05, height * 0.95);
            ctx.lineTo(width * 0.95, height * 0.95);
            ctx.stroke();
        }
        
        // 繪製詞作內容 - 全新改版
        function drawPoem({ctx, width, height, settings}) {
            // 獲取顏色配置
            let textColor;
            
            switch (settings.posterStyle) {
                case 'mo': // 墨韻風格
                    textColor = '#e8e8e8';
                    break;
                case 'qinghua': // 青花風格
                    textColor = '#245a7a';
                    break;
                case 'danqing': // 丹青風格
                    textColor = '#8a292d';
                    break;
                case 'songyan': // 松煙風格
                    textColor = '#1c4024';
                    break;
                case 'zhujian': // 竹簡風格
                    textColor = '#5c3c10';
                    break;
                default: // 宣紙風格
                    textColor = '#333333';
            }
            
            // 設置字體風格 - 強制使用LXGW文楷作為詞作正文字體
            let fontFamily = "'LXGW WenKai', '楷體', 'KaiTi', serif";
            
            ctx.fillStyle = textColor;
            
            // 定義邊框和邊距
            const borderWidth = Math.round(width * 0.02);
            const safeMargin = borderWidth * 1.5; // 安全邊距
            
            // 計算詞牌基本信息
            const cipaiName = settings.cipaiName;
            const cipaiData = cipaiPatterns[cipaiName];
            const breakpoint = cipaiData ? cipaiData.breakpoint : null; // 取得上下闕分界點
            
            // 詞行和總行數
            const lines = settings.content;
            const totalLines = lines.length;
            
            // 分析上下闕
            let upperLines = lines;
            let lowerLines = [];
            
            // 如果有分界點並且行數足夠，分為上下闕
            if (breakpoint && totalLines > breakpoint && breakpoint < totalLines) {
                upperLines = lines.slice(0, breakpoint);
                lowerLines = lines.slice(breakpoint);
            }
            
            // 計算基本尺寸參數
            const titleWidth = width * 0.12; // 標題區域寬度
            const authorWidth = width * 0.10; // 作者區域寬度
            const contentWidth = width - titleWidth - authorWidth - (safeMargin * 2); // 內容區域寬度
            
            // 增加標題和作者與邊框的距離，確保一致性
            const edgeMargin = safeMargin * 2.5; // 增加邊緣間距，並確保一致性
            
            // 計算X座標位置 (從右向左)
            const titleX = width - edgeMargin - titleWidth/2; // 標題位置，距離右邊框更遠
            const titleContentGap = width * 0.08; // 標題和內容之間的空白豎行寬度
            const contentRight = width - edgeMargin - titleWidth - titleContentGap; // 內容右邊界，增加了空白豎行
            const authorX = edgeMargin + authorWidth/2; // 作者位置，距離左邊框更遠
            
            // 計算標題字體大小與間距
            let titleSize = Math.round(width * 0.045); // 標題基礎字體大小
            if (settings.cipaiName.length > 7) {
                titleSize = Math.round(titleSize * (7 / settings.cipaiName.length));
            }
            
            // 計算內容字體大小
            const baseContentFontSize = Math.round(width * 0.04); // 內容基礎字體大小
            
            // 計算所有行中的最大字符數
            const maxCharsInLine = Math.max(...lines.map(line => line.length));
            
            // 計算上下闕各自的最大字符數
            const maxUpperChars = Math.max(...upperLines.map(line => line.length));
            const maxLowerChars = lowerLines.length ? Math.max(...lowerLines.map(line => line.length)) : 0;
            
            // 根據行數調整字體大小
            let fontSize = baseContentFontSize;
            if (totalLines > 12) {
                fontSize = Math.max(baseContentFontSize * 0.8, baseContentFontSize * (12 / totalLines));
            }
            
            // 計算行間距 (每行的寬度，從右向左)
            const totalContentWidth = contentWidth * 0.95; // 內容區域有效寬度，稍微收縮以確保美觀
            
            // 動態調整行間距
            let lineSpacing;
            if (lowerLines.length > 0) {
                // 上下闕分別布局
                const upperLineSpacing = Math.min(totalContentWidth / upperLines.length, fontSize * 2);
                const lowerLineSpacing = Math.min(totalContentWidth / lowerLines.length, fontSize * 2);
                lineSpacing = Math.min(upperLineSpacing, lowerLineSpacing); // 使用較小的間距保持一致性
            } else {
                // 單一布局
                lineSpacing = Math.min(totalContentWidth / totalLines, fontSize * 2);
            }
            
            // 計算字間距
            const charSpacing = fontSize * 1.4; // 字符垂直間距
            
            // 繪製詞牌名（標題）- 豎排在右側
            if (settings.showCipaiTitle) {
                ctx.font = `bold ${titleSize}px ${fontFamily}`;
                const titleChars = settings.cipaiName.split('');
                const titleSpacing = Math.min(titleSize * 1.4, height * 0.6 / titleChars.length);
                const titleStartY = safeMargin * 6 + titleSize/2; // 進一步增加標題與頂部邊框的距離
                
                // 繪製豎排標題
                for (let i = 0; i < titleChars.length; i++) {
                    const char = titleChars[i];
                    const metrics = ctx.measureText(char);
                    const charWidth = metrics.width;
                    const charY = titleStartY + i * titleSpacing;
                    ctx.fillText(char, titleX - charWidth/2, charY);
                }
            }
            
            // 繪製作者 - 豎排在左側底部
            if (settings.showAuthor) {
                const authorSize = Math.round(fontSize * 0.8); // 作者字體大小
                ctx.font = `${authorSize}px ${fontFamily}`;
                const authorChars = settings.author.split('');
                const authorSpacing = authorSize * 1.3;
                const authorTotalHeight = authorChars.length * authorSpacing;
                const authorStartY = height - safeMargin * 3; // 底部固定位置
                
                // 繪製豎排作者名
                for (let i = 0; i < authorChars.length; i++) {
                    const char = authorChars[i];
                    const metrics = ctx.measureText(char);
                    const charWidth = metrics.width;
                    const charY = authorStartY - authorTotalHeight + i * authorSpacing;
                    ctx.fillText(char, authorX - charWidth/2, charY);
                }
            }
            
            // 設置詞作內容字體
            ctx.font = `${fontSize}px ${fontFamily}`;
            
            // 如果需要分上下闕顯示
            if (lowerLines.length > 0) {
                // 上闕高度
                const upperHeight = maxUpperChars * charSpacing;
                // 下闕高度
                const lowerHeight = maxLowerChars * charSpacing;
                
                // 計算詞牌與詞句間的間隔（豎排布局中的豎行間距是水平方向的）
                const titleContentGap = lineSpacing * 1.5; // 設置為一個半豎行的寬度
                
                // 上闕起始Y位置 (上方區域) - 增加與上方邊框的距離
                const upperStartY = safeMargin * 5 + charSpacing * 2; // 增加頂部邊距約兩個字符的距離
                
                // 下闕起始Y位置 (下方區域) - 保持對稱
                const lowerStartY = height/2 + safeMargin * 5; // 保持與上闕相同的邊距
                
                // 繪製分隔線
                ctx.save();
                ctx.strokeStyle = textColor;
                ctx.globalAlpha = 0.3;
                ctx.lineWidth = 1;
                ctx.beginPath();
                ctx.moveTo(width * 0.1, height/2);
                ctx.lineTo(width * 0.9, height/2);
                ctx.stroke();
                ctx.restore();
                
                // 計算上下闕的行數
                const numUpperLines = upperLines.length;
                const numLowerLines = lowerLines.length;
                
                // 徹底重構繪製邏輯，解決上下闋對齊問題
                
                // 預先計算所有行的X座標，確保上下闋第一行精確對齊
                const allLinesX = []; // 存儲所有行的X座標（包括上下闕）
                
                // 第一步：計算所有行的理想X座標
                const totalLines = numUpperLines + numLowerLines;
                const firstColumnX = contentRight; // 第一列（最右側）固定位置
                
                // 確保適當的行間距，無論行數如何
                const commonLineSpacing = Math.min(
                    totalContentWidth / Math.max(numUpperLines, numLowerLines),
                    fontSize * 2
                );
                
                // 第二步：使用同一算法計算所有行的X座標
                for (let i = 0; i < totalLines; i++) {
                    if (i < numUpperLines) {
                        // 上闕行
                        allLinesX.push(firstColumnX - i * commonLineSpacing);
                    } else if (i === numUpperLines) {
                        // 下闕第一行 - 向右偏移一個豎行位置，使其與上闕第一行對齊
                        allLinesX.push(firstColumnX + commonLineSpacing); // 增加了commonLineSpacing向右偏移
                    } else {
                        // 下闕其他行 - 基於下闕第一行的位置計算
                        const lowerLineIndex = i - numUpperLines;
                        // 注意：這裡使用下闕第一行的X座標作為基準，減去行索引乘以間距
                        allLinesX.push(firstColumnX + commonLineSpacing - lowerLineIndex * commonLineSpacing);
                    }
                }
                
                // 第三步：基於預計算的座標繪製上闕
                for (let i = 0; i < numUpperLines; i++) {
                    const line = upperLines[i];
                    const lineX = allLinesX[i];
                    
                    // 繪製每個字
                    for (let j = 0; j < line.length; j++) {
                        const char = line[j];
                        const metrics = ctx.measureText(char);
                        const charWidth = metrics.width;
                        const charY = upperStartY + j * charSpacing;
                        ctx.fillText(char, lineX - charWidth/2, charY);
                    }
                }
                
                // 第四步：基於預計算的座標繪製下闕
                for (let i = 0; i < numLowerLines; i++) {
                    const line = lowerLines[i];
                    const lineX = allLinesX[numUpperLines + i]; // 使用預計算的X座標
                    
                    // 繪製每個字
                    for (let j = 0; j < line.length; j++) {
                        const char = line[j];
                        const metrics = ctx.measureText(char);
                        const charWidth = metrics.width;
                        const charY = lowerStartY + j * charSpacing;
                        ctx.fillText(char, lineX - charWidth/2, charY);
                    }
                }
                
                // 額外調試信息 - 在控制台打印出座標值，便於確認
                console.log("上闕第一行X座標:", allLinesX[0]);
                console.log("下闕第一行X座標:", allLinesX[numUpperLines]);
                if (allLinesX[0] === allLinesX[numUpperLines]) {
                    console.log("✓ 上下闕第一行X座標完全一致");
                } else {
                    console.log("✗ 上下闕第一行X座標不一致");
                }
            } else {
                // 不分上下闕，單一布局
                // 计算内容总高度
                const totalContentHeight = maxCharsInLine * charSpacing;
                // 计算垂直居中的起始位置（增加了顶部边距）
                const contentStartY = Math.max(
                    safeMargin * 6, // 大幅增加顶部最小边距
                    (height - totalContentHeight) / 2 // 垂直居中处理
                );
                
                // 从右向左绘制每一行
                for (let i = 0; i < totalLines; i++) {
                    const line = lines[i];
                    const lineX = contentRight - i * lineSpacing;
                    
                    // 豎排每個字
                    for (let j = 0; j < line.length; j++) {
                        const char = line[j];
                        const metrics = ctx.measureText(char);
                        const charWidth = metrics.width;
                        const charY = contentStartY + j * charSpacing;
                        ctx.fillText(char, lineX - charWidth/2, charY);
                    }
                }
            }
        }
        
        // 下載海報
        function downloadPoster() {
            const canvas = document.getElementById('posterCanvas');
            
            if (!canvas) {
                alert('未找到海報畫布');
                return;
            }
            
            // 創建臨時鏈接
            const link = document.createElement('a');
            
            // 設置下載文件名
            const fileName = `${currentCipai}_${currentAuthor || currentPoem.author}.png`;
            link.download = fileName;
            
            // 設置圖像數據
            link.href = canvas.toDataURL('image/png');
            
            // 模擬點擊下載
            link.click();
        }

        // 獲取修改後的內容
        function getModifiedContent() {
            let content = '';
            document.querySelectorAll('.poem-line').forEach(line => {
                line.childNodes.forEach(node => {
                    if (node.nodeType === Node.TEXT_NODE) {
                        content += node.textContent;
                    } else if (node.tagName === 'SPAN') {
                        content += node.textContent;
                    }
                });
                content += '\n';
            });
            return content.trim();
        }

        // 顯示反饋信息
        function showFeedback(message, type) {
            const feedback = document.getElementById('feedback');
            feedback.innerHTML = message.replace(/\n/g, '<br>');
            feedback.className = `feedback ${type}`;
            
            setTimeout(() => {
                if (type !== 'success') {
                    feedback.innerHTML = '';
                    feedback.className = '';
                }
            }, 5000);
        }

        // 移動端和桌面端視圖切換功能
        function initMobileViewToggle() {
            const container = document.querySelector('.container');
            const mainContent = document.querySelector('.main-content');
            const sidebarContainer = document.getElementById('sidebarContainer');
            const contentContainer = document.getElementById('contentContainer');
            
            // 添加滑動指示器元素 - 移除文字提示以避免在非移動端顯示
            const leftIndicator = document.createElement('div');
            leftIndicator.className = 'swipe-indicator swipe-indicator-left';
            leftIndicator.innerHTML = `
                <div class="swipe-arrow swipe-arrow-left"></div>
                <div class="swipe-arrow swipe-arrow-left"></div>
            `;
            
            const rightIndicator = document.createElement('div');
            rightIndicator.className = 'swipe-indicator swipe-indicator-right';
            rightIndicator.innerHTML = `
                <div class="swipe-arrow swipe-arrow-right"></div>
                <div class="swipe-arrow swipe-arrow-right"></div>
            `;
            
            // 添加滑動提示元素
            const swipeHint = document.createElement('div');
            swipeHint.className = 'swipe-hint';
            swipeHint.textContent = '左右滑動切換界面';
            
            // 添加滑動進度條
            const swipeProgress = document.createElement('div');
            swipeProgress.className = 'swipe-progress';
            
            // 將元素添加到DOM
            mainContent.appendChild(leftIndicator);
            mainContent.appendChild(rightIndicator);
            document.body.appendChild(swipeHint);
            mainContent.appendChild(swipeProgress);
            
            // 設置默認視圖 - 桌面默認顯示詞牌列表，移動端默認顯示詞牌列表
            if (window.innerWidth <= 768) {
                container.classList.add('mobile-view-list'); // 修改：默认显示词牌列表
                
                // 初次加載時顯示滑動指示 (延遲幾秒後顯示)
                setTimeout(() => {
                    showSwipeInstructions();
                }, 2000);
            }
            
            // 初始化視圖狀態
            if (window.innerWidth <= 768) {
                // 移動端：使用保存的視圖模式或默認為詞牌列表視圖
                const savedMode = window.nanfengViewMode || 'list';
                if (savedMode === 'list') {
                    container.classList.remove('mobile-view-edit');
                    container.classList.add('mobile-view-list');
                } else {
                    container.classList.remove('mobile-view-list');
                    container.classList.add('mobile-view-edit');
                }
            } else {
                // 桌面端：根據保存的側邊欄狀態設置
                const sidebarVisible = window.sidebarVisible;
                if (sidebarVisible === false) {
                    container.classList.add('sidebar-hidden');
                } else {
                    container.classList.remove('sidebar-hidden');
                }
            }
            
            // 窗口大小變化時的處理
            window.addEventListener('resize', function() {
                if (window.innerWidth > 768) {
                    // 切換到桌面模式
                    container.classList.remove('mobile-view-list', 'mobile-view-edit');
                    
                    // 根據保存的側邊欄狀態設置
                    const sidebarVisible = window.sidebarVisible;
                    if (sidebarVisible === false) {
                        container.classList.add('sidebar-hidden');
                    } else {
                        container.classList.remove('sidebar-hidden');
                    }
                } else {
                    // 切換到移動模式
                    const currentMode = window.nanfengViewMode || 'edit';
                    if (currentMode === 'list') {
                        container.classList.remove('mobile-view-edit');
                        container.classList.add('mobile-view-list');
                    } else {
                        container.classList.remove('mobile-view-list');
                        container.classList.add('mobile-view-edit');
                    }
                }
            });
            
            // 初始化滑動觸控事件
            initSwipeGestures();
            
            // 切換到列表視圖
            function switchToListView() {
                container.classList.add('view-transitioning');
                container.classList.remove('mobile-view-edit');
                container.classList.add('mobile-view-list');
                window.nanfengViewMode = 'list';
                cipaiToggleText.textContent = "開始創作";
                
                // 結束過渡動畫
                setTimeout(() => {
                    container.classList.remove('view-transitioning');
                }, 500);
            }
            
            // 切換到編輯視圖
            function switchToEditView() {
                container.classList.add('view-transitioning');
                container.classList.remove('mobile-view-list');
                container.classList.add('mobile-view-edit');
                window.nanfengViewMode = 'edit';
                cipaiToggleText.textContent = "查看詞牌";
                
                // 結束過渡動畫
                setTimeout(() => {
                    container.classList.remove('view-transitioning');
                }, 500);
            }
            
            // 切換移動視圖
            function toggleMobileView() {
                if (container.classList.contains('mobile-view-edit')) {
                    switchToListView();
                } else {
                    switchToEditView();
                }
            }
            
            // 初始化滑動手勢
            function initSwipeGestures() {
                let touchStartX = 0;
                let touchStartY = 0;
                let touchEndX = 0;
                let touchEndY = 0;
                let currentSwipeDistance = 0;
                let isSwipeInProgress = false;
                let swipeStartTime = 0;
                const minSwipeDistance = 50; // 減小最小滑動距離，使滑動更容易觸發
                const maxSwipeTime = 600; // 增加最大滑動時間，使滑動更容易觸發
                const maxVerticalOffset = 100; // 增加最大垂直偏移量，更寬容的判定
                
                mainContent.addEventListener('touchstart', function(e) {
                    if (window.innerWidth > 768) return;
                    
                    touchStartX = e.changedTouches[0].screenX;
                    touchStartY = e.changedTouches[0].screenY;
                    swipeStartTime = Date.now();
                    isSwipeInProgress = true;
                    currentSwipeDistance = 0;
                    swipeProgress.style.width = '0%';
                    
                    // 輸出調試信息
                    console.log("觸摸開始: ", touchStartX, touchStartY);
                });
                
                mainContent.addEventListener('touchmove', function(e) {
                    if (!isSwipeInProgress || window.innerWidth > 768) return;
                    
                    const currentX = e.changedTouches[0].screenX;
                    const currentY = e.changedTouches[0].screenY;
                    const deltaX = currentX - touchStartX;
                    const deltaY = currentY - touchStartY;
                    
                    // 輸出調試信息
                    console.log("觸摸移動: ", deltaX, deltaY);
                    
                    // 檢查是否主要是水平滑動
                    if (Math.abs(deltaY) > maxVerticalOffset && Math.abs(deltaY) > Math.abs(deltaX) * 1.5) {
                        // 這是垂直滑動，不處理
                        console.log("判定為垂直滑動，忽略");
                        isSwipeInProgress = false;
                        swipeProgress.style.width = '0%';
                        return;
                    }
                    
                    // 這是水平滑動，更新進度條
                    currentSwipeDistance = deltaX;
                    const screenWidth = window.innerWidth;
                    let progressPercent;
                    
                    // 視圖切換方向取決於當前視圖和滑動方向
                    if (container.classList.contains('mobile-view-edit')) {
                        // 從編輯視圖向右滑動到詞牌列表
                        if (deltaX > 0) {
                            progressPercent = Math.min(100, (deltaX / minSwipeDistance) * 80);
                            showSwipeHint("右滑 → 查看詞牌");
                            console.log("編輯視圖向右滑動: ", progressPercent, "%");
                        } else {
                            progressPercent = 0;
                        }
                    } else {
                        // 從詞牌列表向左滑動到編輯視圖
                        if (deltaX < 0) {
                            progressPercent = Math.min(100, (Math.abs(deltaX) / minSwipeDistance) * 80);
                            showSwipeHint("← 左滑 創作界面");
                            console.log("列表視圖向左滑動: ", progressPercent, "%");
                        } else {
                            progressPercent = 0;
                        }
                    }
                    
                    // 更新進度條
                    swipeProgress.style.width = progressPercent + '%';
                    
                    // 防止頁面滾動
                    if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
                        e.preventDefault();
                    }
                }, { passive: false });
                
                mainContent.addEventListener('touchend', function(e) {
                    if (!isSwipeInProgress || window.innerWidth > 768) return;
                    
                    touchEndX = e.changedTouches[0].screenX;
                    touchEndY = e.changedTouches[0].screenY;
                    const swipeTime = Date.now() - swipeStartTime;
                    const deltaX = touchEndX - touchStartX;
                    const deltaY = touchEndY - touchStartY;
                    
                    // 輸出調試信息
                    console.log("觸摸結束: ", deltaX, deltaY, "耗時: ", swipeTime, "ms");
                    
                    isSwipeInProgress = false;
                    swipeProgress.style.width = '0%';
                    hideSwipeHint();
                    
                    // 檢查是否有效的水平滑動 - 更寬容的判定條件
                    if (Math.abs(deltaX) >= minSwipeDistance && 
                        Math.abs(deltaY) <= maxVerticalOffset && 
                        swipeTime <= maxSwipeTime) {
                        
                        console.log("有效滑動: ", deltaX > 0 ? "向右" : "向左");
                        
                        // 視圖切換方向取決於當前視圖和滑動方向
                        if (container.classList.contains('mobile-view-edit')) {
                            // 從編輯視圖向右滑動到詞牌列表
                            if (deltaX > 0) {
                                console.log("從編輯視圖切換到列表視圖");
                                switchToListView();
                            }
                        } else {
                            // 從詞牌列表向左滑動到編輯視圖
                            if (deltaX < 0) {
                                console.log("從列表視圖切換到編輯視圖");
                                switchToEditView();
                            }
                        }
                    } else {
                        console.log("無效滑動，條件不滿足", "deltaX:", Math.abs(deltaX), ">=", minSwipeDistance, "deltaY:", Math.abs(deltaY), "<=", maxVerticalOffset, "swipeTime:", swipeTime, "<=", maxSwipeTime);
                    }
                });
            }
            
            // 顯示滑動提示
            function showSwipeHint(message) {
                const hint = document.querySelector('.swipe-hint');
                hint.textContent = message;
                hint.classList.add('active');
                
                // 自動隱藏提示
                clearTimeout(window.swipeHintTimeout);
                window.swipeHintTimeout = setTimeout(() => {
                    hideSwipeHint();
                }, 2000);
            }
            
            // 隱藏滑動提示
            function hideSwipeHint() {
                const hint = document.querySelector('.swipe-hint');
                hint.classList.remove('active');
            }
            
            // 顯示滑動指示說明
            function showSwipeInstructions() {
                // 使用會話變量代替localStorage
                if (window.swipeInstructionShown) {
                    return;
                }
                
                const message = container.classList.contains('mobile-view-edit') ? 
                    "右滑可查看詞牌列表" : "左滑可進入創作界面";
                    
                showSwipeHint(message);
                
                // 記錄用户已經看過指示（使用會話變量）
                window.swipeInstructionShown = true;
                
                // 每次顯示3秒後自動隱藏
                setTimeout(() => {
                    hideSwipeHint();
                }, 3000);
            }
        }
        
        // 側邊欄切換按鈕點擊處理
        document.getElementById('sidebarToggleBtn').addEventListener('click', function() {
            const container = document.querySelector('.container');
            if (container.classList.contains('sidebar-hidden')) {
                container.classList.remove('sidebar-hidden');
                window.sidebarVisible = true;
            } else {
                container.classList.add('sidebar-hidden');
                window.sidebarVisible = false;
            }
        });
        
        // 頁面加載完成後初始化
        document.addEventListener('DOMContentLoaded', function() {
            initPage();
            initMobileViewToggle();
        });
    </script>
</body>
</html>
